{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/Level.js","src/logic/Geometry.js","src/logic/block/CrackLogic.js","src/logic/block/SlopeLogic.js","src/main.js","src/ui/ButtonGroup.js","src/ui/ButtonToggle.js","src/ui/Cursor.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export class Level {\r\n\r\n    /*--------------------------------------- STATIC METHODS ------------------*/\r\n    static load() {\r\n        Level._tileSize = 17;\r\n        Level._width = 680;\r\n        Level._height = 408;\r\n\r\n        //load all scenes with this size\r\n        Array.from(document.querySelectorAll(\".scene__bounds\")).forEach(el => {\r\n            el.style.width = `${Level._width}px`;\r\n            el.style.height = `${Level._height}px`;\r\n        });\r\n    }   \r\n    /*--------------------------------------- METHODS -------------------------*/\r\n    /*--------------------------------------- EVENTS --------------------------*/\r\n    /*--------------------------------------- OVERRIDES -----------------------*/\r\n    /*--------------------------------------- GETTERS AND SETTERS -------------*/\r\n    static get TileSize() { return Level._tileSize; }\r\n    static get Width() { return Level._width; }\r\n    static get Height() { return Level._height; }\r\n}","import { Level } from \"../Level\";\r\nimport { ButtonGroup } from \"../ui/ButtonGroup\";\r\nimport { CrackLogic } from \"./block/CrackLogic\";\r\nimport { SlopeLogic } from \"./block/SlopeLogic\";\r\n\r\nexport class Geometry {\r\n    constructor(cursor, toolbarButtonParentElement) {\r\n\r\n        //follows the geometry.scss naming conventions\r\n        Geometry.BLOCKS = {\r\n            Waterfall : \"waterfall\",\r\n            Solid : \"solid\",\r\n            Air : \"air\",\r\n            Pole : {Horizontal:\"poleh\", Vertical:\"polev\"},\r\n            Slope : {TopLeft:\"slope-tl\", TopRight:\"slope-tr\", BottomLeft:\"slope-bl\", BottomRight:\"slope-br\"},\r\n            Floor : \"floor\",\r\n            Shortcut : \"shortcut\",\r\n            ShortcutPath : \"shortcut-path\",\r\n            Barrier : \"solid\",\r\n            Glass : \"glass\",\r\n            Crack : {Horizontal:\"crack-terrainh\", Vertical:\"crack-terrainv\", Both:\"crack-terrainb\"}\r\n        }\r\n\r\n        //set up block type groups -- only one of each type is allowed to exist in a cell -- renders in order, lower - higher\r\n        Geometry.BLOCK_TYPES = {\r\n            Full : [Geometry.BLOCKS.Solid, Geometry.BLOCKS.Air], //conflicting blocks, cannot be on same cell\r\n            Solid : [Geometry.BLOCKS.Solid, ...Object.values(Geometry.BLOCKS.Slope), Geometry.BLOCKS.Glass, Geometry.BLOCKS.Floor, ...Object.values(Geometry.BLOCKS.Crack)],\r\n            Horizontal : [Geometry.BLOCKS.Pole.Horizontal], //used for beams that can cross-section\r\n            Vertical : [Geometry.BLOCKS.Pole.Vertical],\r\n            Overlay : [\"shortcut-path\", \"shortcut\"]\r\n        };\r\n\r\n        /* include solid block in the horizontal/vertical list as they shouldn't exist on the same plane -- ignore slopes though */\r\n        const solidBlocks = [...Geometry.BLOCK_TYPES.Solid].filter(b => Object.values(Geometry.BLOCKS.Slope).indexOf(b) == -1);\r\n        Geometry.BLOCK_TYPES.Horizontal.push(...solidBlocks);\r\n        Geometry.BLOCK_TYPES.Vertical.push(...solidBlocks);\r\n\r\n        //load in any block logic\r\n        CrackLogic.load(Geometry.BLOCKS.Crack.Horizontal, Geometry.BLOCKS.Crack.Vertical, Geometry.BLOCKS.Crack.Both);\r\n        SlopeLogic.load(Geometry.BLOCKS.Slope.TopLeft, Geometry.BLOCKS.Slope.TopRight, Geometry.BLOCKS.Slope.BottomLeft, Geometry.BLOCKS.Slope.BottomRight);\r\n        \r\n\r\n        this.cursor = cursor;\r\n        this.toolbarButtons = new ButtonGroup(toolbarButtonParentElement);\r\n\r\n        this._lastCoords = {x:-1, y:-1};\r\n\r\n        this.currentLayer = 1;\r\n        this.currentGeoTag = \"solid\";\r\n        this.lastAssessedGeoTag = \"solid\"; //released when mouse up is called\r\n        this.isDeleting = false; //flag called when action is delete\r\n\r\n        this._isDragRect = false;\r\n        this._startDragCoords = {x:0, y:0};\r\n\r\n        //hold layer geometry\r\n        let geoMap = [];\r\n        this._gridSize = this._getCoordsFromPosition(Level.Width, Level.Height);\r\n        console.log(this._gridSize);\r\n        for(let y = 0; y < this._gridSize.y; y++) {\r\n            let row = [];\r\n            for(let x = 0; x < this._gridSize.x; x++)\r\n                row.push(null);\r\n            geoMap.push(row);\r\n        }\r\n        this.layersGeo = [[...geoMap],[...geoMap],[...geoMap]];\r\n        console.log(this.layersGeo);\r\n\r\n        //listen to component events\r\n        this.cursor.CursorElement.addEventListener(\"cursor-click\", this._onCursorClick.bind(this));\r\n        this.cursor.CursorElement.addEventListener(\"cursor-drag\", this._onCursorDrag.bind(this));\r\n        this.cursor.CursorElement.addEventListener(\"cursor-right-click\", this._onCursorRightClick.bind(this));\r\n        this.cursor.CursorElement.addEventListener(\"cursor-right-drag\", this._onCursorRightDrag.bind(this));\r\n        this.toolbarButtons.ParentElement.addEventListener(\"button-click\", this._onToolbarButtonClick.bind(this));\r\n    }\r\n\r\n    /*--------------------------------------- STATIC METHODS ------------------*/\r\n    /*--------------------------------------- METHODS -------------------------*/\r\n    listen() {\r\n        //listen to cursor\r\n        this.cursor.listen();\r\n\r\n        console.log(\"TYPES\", Geometry.BLOCK_TYPES.Solid);\r\n    }\r\n\r\n    unlisten() {\r\n        //stop listen to cursor\r\n        this.cursor.unlisten();\r\n    }\r\n\r\n    _setBlock(coords, removeDup = true) {\r\n\r\n        const layerGeo = this.layersGeo[this.currentLayer-1];\r\n\r\n\r\n        //see if we have a geoDiv in this coordinate\r\n        //if our tag is CLEAR, remove all children from this position\r\n        if(this.currentGeoTag == \"clear\") {\r\n            Array.from(geoContainer.children).forEach(el => el.remove());\r\n            this._lastCoords = coords;\r\n            return;\r\n        }\r\n        \r\n\r\n        //PRE PROCESSING\r\n        //process block type by category\r\n\r\n        const geoDiv = layerGeo[coords.y][coords.x];\r\n\r\n\r\n        switch(this.lastAssessedGeoTag) {\r\n            case Geometry.BLOCKS.Slope.TopLeft:\r\n            case Geometry.BLOCKS.Slope.TopRight:\r\n            case Geometry.BLOCKS.Slope.BottomLeft:\r\n            case Geometry.BLOCKS.Slope.BottomRight:\r\n                //if this is a new coord, reassess slope\r\n                if(coords.x != this._lastCoords.x || coords.y != this._lastCoords.y) {\r\n                    SlopeLogic.slopeTerrain(layerGeo, coords.x, coords.y, Geometry.BLOCK_TYPES.Solid);\r\n                    this.currentGeoTag = SlopeLogic.CurrentSlopeTag;\r\n                    this._assessBlock(layerGeo, geoDiv, coords.x, coords.y);\r\n                }\r\n                else {\r\n                    SlopeLogic.next();\r\n                    const wantedGeoTag = SlopeLogic.CurrentSlopeTag;\r\n                    if(wantedGeoTag == \"\") {\r\n                        this._removeTerrainBlock(this.currentGeoTag, geoDiv);\r\n                    }\r\n                    else {\r\n                        this._makeTerrainBlock(layerGeo, wantedGeoTag, coords.x, coords.y);\r\n                        this.currentGeoTag = wantedGeoTag;\r\n                    }\r\n                }\r\n                break;\r\n\r\n            default: {\r\n                this._assessBlock(layerGeo, geoDiv, coords.x, coords.y);\r\n            }\r\n        }\r\n\r\n        this._lastCoords = coords;           \r\n\r\n            \r\n    }\r\n\r\n    /**Try to add the block, or remove if deletion flag is set. */\r\n    _assessBlock(layerGeo, geoDiv, x, y) {\r\n        //if our delete flag is on, try to remove the blocks, or don't make them\r\n        if(this.isDeleting) this._removeTerrainBlock(this.currentGeoTag, geoDiv);\r\n        //otherwise, make the block\r\n        else this._makeTerrainBlock(layerGeo, this.currentGeoTag, x, y);\r\n    }\r\n\r\n\r\n    /**Returns the coordinates from the given position, using the tile size of 17. */\r\n    _getCoordsFromPosition(x, y) {\r\n        return {x:Math.floor(x/Level.TileSize), y:Math.floor(y/Level.TileSize)};\r\n    }\r\n\r\n\r\n    /**Makes a terrain block. If one already exists on this cell, this will return false. */\r\n    _makeTerrainBlock(arr, type, x, y, allowSwapping = true) {\r\n        if(type == \"\") return;\r\n\r\n        //get the cell, or create one if none exists\r\n        const cell = this._getTerrainContainer(arr, x, y);\r\n        const alreadyExists = Array.from(arr[y][x].children).some(el => el.classList.contains(type));\r\n        //test type against cell, and remove any overlap\r\n        //look for type in lookup\r\n        const types = Geometry.BLOCK_TYPES;\r\n        for(let key of Object.keys(types)) {\r\n            if(types[key].indexOf(type) != -1) {\r\n                //remove any blocks that contain that key within the type\r\n                types[key].filter(t => t !== type).forEach(t => this._removeTerrainBlock(t, cell));\r\n            }\r\n        }\r\n\r\n        if(alreadyExists) {\r\n            //did not build terrain block\r\n            return false;\r\n        }\r\n        else {\r\n            //create block type\r\n            let geoDiv = document.createElement(\"div\");\r\n            geoDiv.classList.add(type, \"geometry\", \"tile\");\r\n            geoDiv.style.position = \"absolute\";\r\n            geoDiv.style.left = `${x * Level.TileSize}px`;\r\n            geoDiv.style.top = `${y * Level.TileSize}px`;\r\n            geoDiv.draggable = false;\r\n            //attach to el\r\n            cell.appendChild(geoDiv);\r\n\r\n            //sort the children by their hierarchy in the block types\r\n            const sortedDiv = [...Array.from(cell.children).sort((a, b) => {\r\n                //get the names\r\n                const typeA = a.classList[0];\r\n                const typeB = b.classList[0];\r\n                //test their last position in the block types\r\n                const blocks = Object.values(Geometry.BLOCK_TYPES);\r\n                const posA = Math.max(...blocks.map((gr, i) => (gr.indexOf(typeA) != -1) ? i : -1 ));\r\n                const posB = Math.max(...blocks.map((gr, i) => (gr.indexOf(typeB) != -1) ? i : -1 ));\r\n\r\n                return posA > posB ? 1 : -1;\r\n            })]\r\n\r\n            //re-add children in order\r\n            sortedDiv.forEach(ch => cell.appendChild(ch));\r\n\r\n            return true;\r\n        }\r\n    }\r\n    _removeTerrainBlock(type, cell) {\r\n        if(cell == null) return;\r\n        //look for type\r\n        const geoDiv = Array.from(cell.children).find(el => el.classList.contains(type));\r\n        if(geoDiv != null) geoDiv.remove();\r\n    }\r\n    _getTerrainContainer(arr, x, y) {\r\n        if(arr[y][x] != null) return arr[y][x];\r\n\r\n        //place an object for test\r\n        let div = document.createElement(\"div\");\r\n        //TODO put on proper layer\r\n        this.cursor.CursorElement.parentElement.querySelector(\".layer\").appendChild(div);\r\n        arr[y][x] = div;\r\n        return div;\r\n    }\r\n\r\n\r\n    // _testTerrainBlock(arr, x, y, changeAdjs = true) {\r\n    //     if(x < 0 || x >= arr[0].length || y < 0 || y >= arr.length) return;\r\n    //     if(arr[y][x] == null) return;\r\n\r\n    //     //get our terrain block\r\n    //     const terrainBlock = Array.from(arr[y][x].children).find(ch => (ch.classList.contains(Geometry.BLOCKS.Crack.Vertical) || ch.classList.contains(Geometry.BLOCKS.Crack.Horizontal) || ch.classList.contains(Geometry.BLOCKS.Crack.Both)) );\r\n    //     if(terrainBlock != null) {\r\n    //         //test the surrounding\r\n    //         const { left, right, top, bottom } = this._testAdjacentTerrains(arr, x, y);\r\n    //         // console.log(left, right, top, bottom);\r\n\r\n    //         if(changeAdjs) {\r\n    //             if(top != null) this._makeTerrainBlock(arr, Geometry.BLOCKS.Crack.Vertical, x, y-1);\r\n    //             if(bottom != null) this._makeTerrainBlock(arr, Geometry.BLOCKS.Crack.Vertical, x, y+1);\r\n    //         }\r\n\r\n    //         // if(changeAdjs) {\r\n    //         //     if(top != null) this._setTerrainBlock(top, \"crack-terrainv\");\r\n    //         //     if(bottom != null) this._setTerrainBlock(bottom, \"crack-terrainv\");\r\n    //         // }\r\n\r\n    //         //set ourselves\r\n    //         // if((top != null || bottom != null) && (left != null || right != null)) this._setTerrainBlock(terrainBlock, \"crack-terrainb\");\r\n    //     }\r\n\r\n    // }\r\n\r\n    _testTerrainBlock(arr, x, y, changeAdjs = true) {\r\n        if(x < 0 || x >= arr[0].length || y < 0 || y >= arr.length) return;\r\n        if(arr[y][x] == null) return;\r\n\r\n        //get our terrain block\r\n        const terrainBlock = Array.from(arr[y][x].children).find(ch => (ch.classList.contains(Geometry.BLOCKS.Crack.Vertical) || ch.classList.contains(Geometry.BLOCKS.Crack.Horizontal) || ch.classList.contains(Geometry.BLOCKS.Crack.Both)) );\r\n        if(terrainBlock != null) {\r\n            //test the surrounding\r\n            const { left, right, top, bottom } = this._testAdjacentTerrains(arr, x, y);\r\n            // console.log(left, right, top, bottom);\r\n\r\n            if(changeAdjs) {\r\n                if(top != null) this._makeTerrainBlock(arr, Geometry.BLOCKS.Crack.Vertical, x, y-1);\r\n                if(bottom != null) this._makeTerrainBlock(arr, Geometry.BLOCKS.Crack.Vertical, x, y+1);\r\n                if(left != null && (top != null || bottom != null)) this._makeTerrainBlock(arr, Geometry.BLOCKS.Crack.Both, x-1, y);\r\n                else if(left != null) this._makeTerrainBlock(arr, Geometry.BLOCKS.Crack.Horizontal, x-1, y);\r\n                if(right != null && (top != null || bottom != null)) this._makeTerrainBlock(arr, Geometry.BLOCKS.Crack.Both, x+1, y);\r\n                else if(right != null) this._makeTerrainBlock(arr, Geometry.BLOCKS.Crack.Horizontal, x+1, y);\r\n            }\r\n\r\n            // if(changeAdjs) {\r\n            //     if(top != null) this._setTerrainBlock(top, \"crack-terrainv\");\r\n            //     if(bottom != null) this._setTerrainBlock(bottom, \"crack-terrainv\");\r\n            // }\r\n\r\n            //set ourselves\r\n            if((top != null || bottom != null) && (left != null || right != null)) this._makeTerrainBlock(arr, Geometry.BLOCKS.Crack.Both, x, y);\r\n        }\r\n\r\n    }\r\n\r\n    /**Returns the terrain name if it finds one */\r\n    _lookForTerrainType(cell, ...type) {\r\n        for(let i = 0; i < type.length; i++) {\r\n            const children = Array.from(cell.children);\r\n            for(let n = 0; n < children.length; n++) {\r\n                if(children[n].classList.contains(type[i])) return type[i];\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    _testAdjacentTerrains(arr, x, y) {\r\n        const currBlockDiv = arr[y][x];\r\n        let terrainBlocks = {left:null, right:null, top:null, bottom:null};\r\n\r\n        //test left\r\n        if(x-1 >= 0) {\r\n            const block = arr[y][x-1];\r\n            terrainBlocks.left = this._getTerrainBlock(block);\r\n        }\r\n        //test right\r\n        if(x+1 < arr[0].length) {\r\n            const block = arr[y][x+1];\r\n            terrainBlocks.right = this._getTerrainBlock(block);\r\n        }\r\n        //test top\r\n        if(y-1 >= 0) {\r\n            const block = arr[y-1][x];\r\n            terrainBlocks.top = this._getTerrainBlock(block);\r\n        }\r\n        //test bottom\r\n        if(y+1 < arr.length) {\r\n            const block = arr[y+1][x];\r\n            terrainBlocks.bottom = this._getTerrainBlock(block);\r\n        }\r\n        return terrainBlocks;\r\n    }\r\n    _getTerrainBlock(block) {\r\n        if(block == null) return null;\r\n        return Array.from(block.children).find(ch => (ch.classList.contains('crack-terrainh') || ch.classList.contains('crack-terrainv') || ch.classList.contains('crack-terrainb') ));\r\n    }\r\n    _setTerrainBlock(block, type) {\r\n        if(block == null) return;\r\n        //remove old classlists\r\n        console.log(block);\r\n        block.className = \"geometry\";\r\n        console.log(block);\r\n        //give new class\r\n        block.classList.add(type);\r\n    }\r\n\r\n    /*--------------------------------------- EVENTS --------------------------*/\r\n    _onCursorClick(e) {\r\n        this._isDragRect = false;\r\n        // console.log(e);\r\n        const position = e.detail;\r\n\r\n        //set the deletion flag by seeing if this type of terrain exists on this block position already\r\n        const coords = this._getCoordsFromPosition(position.x, position.y);\r\n        const cell = this.layersGeo[this.currentLayer][coords.y][coords.x];\r\n        if(cell == null) this.isDeleting = false;\r\n        else {\r\n            const t = this._lookForTerrainType(cell, this.currentGeoTag);\r\n            this.isDeleting = (t == this.currentGeoTag);\r\n        }\r\n\r\n        this._setBlock(coords);\r\n    }\r\n    _onCursorDrag(e) {\r\n        if(this._isDragRect) return;\r\n\r\n        const position = e.detail;\r\n        //get coord\r\n        const coords = this._getCoordsFromPosition(position.x, position.y);\r\n        //if coord is same as last coord, don't do anything\r\n        if(coords.x == this._lastCoords.x && coords.y == this._lastCoords.y) return;\r\n        this._setBlock(coords, false);\r\n    }\r\n    //handles building rect of selection\r\n    _onCursorRightClick(e) {\r\n        this._isDragRect = true;\r\n        const position = e.detail;\r\n        //get coord\r\n        const coords = this._getCoordsFromPosition(position.x, position.y);\r\n        this._startDragCoords = coords;\r\n    }\r\n    _onCursorRightDrag(e) {\r\n        console.log(\"LOOK AT ME\");\r\n        const position = e.detail;\r\n        //get coord\r\n        const coords = this._getCoordsFromPosition(position.x, position.y);\r\n\r\n        for(let y = this._startDragCoords.y; y < coords.y; y++) {\r\n            for(let x = this._startDragCoords.x; x < coords.x; x++) {\r\n                this._setBlock({x, y}, false);\r\n            }\r\n        }        \r\n    }\r\n\r\n    _onToolbarButtonClick(e) {\r\n        const value = e.detail;\r\n        console.log(value);\r\n\r\n        switch(value) {\r\n            case \"slope\":\r\n                //handle slope renaming\r\n                this.currentGeoTag = Geometry.BLOCKS.Slope.TopLeft;\r\n                break;\r\n            case \"tunnel\":\r\n                //handle tunnel renaming\r\n                this.currentGeoTag = Geometry.BLOCKS.Crack.Horizontal;\r\n                break;\r\n            case \"shortcut\":\r\n                //handle shortcut entrance\r\n                this.currentGeoTag = value;\r\n                break;\r\n            default:\r\n                this.currentGeoTag = value;\r\n        }\r\n\r\n        this.lastAssessedGeoTag = this.currentGeoTag;\r\n    }\r\n    /*--------------------------------------- OVERRIDES -----------------------*/\r\n    /*--------------------------------------- GETTERS AND SETTERS -------------*/\r\n}","/**A class to handle manipulating crack terrain data from the geometry class. */\r\nexport class CrackLogic {\r\n    static load(hTag, vTag, bTag) {\r\n        CrackLogic.hTag = hTag;\r\n        CrackLogic.vTag = vTag;\r\n        CrackLogic.bTag = bTag;\r\n    }\r\n\r\n    /**\r\n     * Returns an array with desired block tags.\r\n     * @param {*} arr \r\n     * @param {number} x \r\n     * @param {number} y \r\n     * @returns An array with desired block tags - {self:string, left:string, right:string, top:string, bottom:string}.\r\n     */\r\n    static crackTerrain(arr, x, y) {\r\n        //find all of our cracked terrain\r\n        // console.log(\"RAW\", arr);\r\n        let crackedTerrain = CrackLogic._getCrackMap(arr);\r\n        crackedTerrain[y][x] = true; //set our block as true as well\r\n\r\n        console.log(\"TERRAIN CRACK\", crackedTerrain);\r\n\r\n        let desiredCracks = {self:null, left:null, right:null, top:null, bottom:null};\r\n        //request types for each corner/self\r\n        desiredCracks.left = this._findDesiredCrack(crackedTerrain, x-1, y);\r\n        desiredCracks.right = this._findDesiredCrack(crackedTerrain, x+1, y);\r\n        desiredCracks.top = this._findDesiredCrack(crackedTerrain, x, y-1);\r\n        desiredCracks.bottom = this._findDesiredCrack(crackedTerrain, x, y+1);\r\n        desiredCracks.self = this._findDesiredCrack(crackedTerrain, x, y);\r\n\r\n        return desiredCracks;\r\n    }\r\n\r\n\r\n    static _findDesiredCrack(crackArr, x, y) {\r\n        //see if we can even change this crack\r\n        if(x < 0 || x > (crackArr[0].length-1)) return \"\";\r\n        if(y < 0 || y > (crackArr.length-1)) return \"\";\r\n        if(!crackArr[y][x]) return \"\";\r\n\r\n        let desiredCrack = \"\";\r\n        let sides = {left:false, right:false, top:false, bottom:false};\r\n        //set left\r\n        if((x-1) >= 0) if(crackArr[y][x-1]) sides.left = true;\r\n        //set right\r\n        if((x+1) > (crackArr[0].length-1)) if(crackArr[y][x+1]) sides.right = true;\r\n        //set top\r\n        if((y-1) >= 0) if(crackArr[y-1][x]) sides.top = true;\r\n        //set bottom\r\n        if((y+1) > (crackArr.length-1)) if(crackArr[y+1][x]) sides.bottom = true;\r\n\r\n        //test hor/ver\r\n        desiredCrack = (sides.top || sides.bottom) ? CrackLogic.vTag : CrackLogic.hTag;\r\n        //test both\r\n        if((sides.top || sides.bottom) && (sides.left || sides.right)) desiredCrack = CrackLogic.bTag;\r\n\r\n        return desiredCrack;\r\n    }\r\n\r\n\r\n    /**Returns a map of true/false values depending on whether that cell has a cracked terrain block. */\r\n    static _getCrackMap(arr) {\r\n        return arr.map(row => {\r\n            if(row == null) return false;\r\n\r\n            return row.map(el => {\r\n                if(el == null) return false;\r\n                const children = Array.from(el.children);\r\n\r\n                return children.some(div => {\r\n                    if(div.children == null) return false;\r\n\r\n                    return  div.classList.contains(CrackLogic.hTag) ||\r\n                            div.classList.contains(CrackLogic.vTag) ||\r\n                            div.classList.contains(CrackLogic.bTag);\r\n\r\n                });\r\n                    \r\n            });\r\n\r\n        });\r\n    }\r\n\r\n}","/**A class to handle manipulating slope terrain data from the geometry class. */\r\nexport class SlopeLogic {\r\n    static load(tLTag, tRTag, bLTag, bRTag) {\r\n        SlopeLogic.tLTag = tLTag;\r\n        SlopeLogic.tRTag = tRTag;\r\n        SlopeLogic.bLTag = bLTag;\r\n        SlopeLogic.bRTag = bRTag;\r\n\r\n        SlopeLogic._layerArray = null;\r\n        SlopeLogic._slopeIndex = 0;\r\n        SlopeLogic._slopes = [];\r\n    }\r\n\r\n\r\n    static slopeTerrain(arr, x, y, solidBlockTypes) {\r\n\r\n        //remove our slopes from the solid block types\r\n        solidBlockTypes = solidBlockTypes.filter(t => t != SlopeLogic.tLTag && t != SlopeLogic.tRTag && t != SlopeLogic.bLTag && t != SlopeLogic.bRTag);\r\n\r\n        // if(SlopeLogic._slopes.length > 0) return SlopeLogic;\r\n\r\n        SlopeLogic.reset();\r\n        SlopeLogic._layerArray = arr;\r\n\r\n        //if this block is solid, ignore\r\n        if(this._isSolidBlock(arr, x, y, solidBlockTypes)) return SlopeLogic;\r\n\r\n        let surroundingBlocks = {left:null, right:null, top:null, bottom:null};\r\n\r\n        //request types for each corner/self\r\n        surroundingBlocks.left = this._isSolidBlock(arr, x-1, y, solidBlockTypes);\r\n        surroundingBlocks.right = this._isSolidBlock(arr, x+1, y, solidBlockTypes);\r\n        surroundingBlocks.top = this._isSolidBlock(arr, x, y-1, solidBlockTypes);\r\n        surroundingBlocks.bottom = this._isSolidBlock(arr, x, y+1, solidBlockTypes);\r\n\r\n        const {left, right, top, bottom} = surroundingBlocks;\r\n\r\n        console.log(\"SURROUNDING:\", surroundingBlocks);\r\n\r\n        //compare edges\r\n        if(top && left) SlopeLogic._slopes.push(SlopeLogic.tLTag);\r\n        if(top && right) SlopeLogic._slopes.push(SlopeLogic.tRTag);\r\n        if(bottom && left) SlopeLogic._slopes.push(SlopeLogic.bLTag);\r\n        if(bottom && right) SlopeLogic._slopes.push(SlopeLogic.bRTag);\r\n\r\n        if(left && right) SlopeLogic._slopes = [];\r\n\r\n        console.log(\"MY SLOPES\", SlopeLogic._slopes);\r\n\r\n        return SlopeLogic;\r\n    }\r\n\r\n    /**Get the next possible slope for this block.*/\r\n    static next() {\r\n        SlopeLogic._slopeIndex++;\r\n        if(SlopeLogic._slopeIndex > SlopeLogic._slopes.length) SlopeLogic._slopeIndex = 0;\r\n        return SlopeLogic;\r\n    }\r\n    \r\n    static reset() {\r\n        SlopeLogic._slopes = [];\r\n        SlopeLogic._slopeIndex = 0;\r\n    }\r\n\r\n\r\n    static _isSolidBlock(arr, x, y, solidBlockTypes) {\r\n        //see if we can even change this crack\r\n        if(x < 0 || x > (arr[0].length-1)) return false;\r\n        if(y < 0 || y > (arr.length-1)) return false;\r\n        if(!arr[y][x]) return false;\r\n\r\n        const block = arr[y][x];\r\n        const children = Array.from(block.children);\r\n        if(children == null) return false;\r\n        return children.some(ch => {\r\n            for(let i = 0; i < solidBlockTypes.length; i++)\r\n                if(ch.classList.contains(solidBlockTypes[i]))\r\n                    return true;\r\n        });\r\n    }\r\n\r\n\r\n    static get CurrentSlopeTag() { return ((SlopeLogic._slopes.length <= 0) || (SlopeLogic._slopeIndex == SlopeLogic._slopes.length) ) ? \"\" : SlopeLogic._slopes[SlopeLogic._slopeIndex]; }\r\n\r\n}","import { ButtonToggle } from \"./ui/ButtonToggle\";\r\nimport { Cursor } from \"./ui/Cursor\";\r\nimport { Geometry } from \"./logic/Geometry\";\r\nimport { Level } from \"./Level\";\r\n\r\n\r\n\r\n/*--------------------------------------- STATIC METHODS ------------------*/\r\nfunction main() {\r\n    console.log(\"STARTED\");\r\n    //load components\r\n    ButtonToggle.load();\r\n    Cursor.load();\r\n\r\n    console.log(Cursor.Cursors);\r\n\r\n    //load level\r\n    Level.load();\r\n\r\n    //load envs\r\n    new Geometry(Cursor.Cursors['geometry-cursor'], document.querySelector(\".toolbar.geometry\")).listen();\r\n\r\n    document.body.draggable = false;\r\n    document.oncontextmenu = (e) => { return false; }\r\n}\r\n\r\n/*--------------------------------------- METHODS -------------------------*/\r\n/*--------------------------------------- EVENTS --------------------------*/\r\n/*--------------------------------------- OVERRIDES -----------------------*/\r\n/*--------------------------------------- GETTERS AND SETTERS -------------*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nmain()","export class ButtonGroup {\r\n    constructor(parentElement) {\r\n        this._parentElement = parentElement;\r\n        //find all the buttons within the parent element\r\n        this.buttons = Array.from(parentElement.querySelectorAll(\"button\"));\r\n        console.log(\"BUTTONS\", this.buttons);\r\n\r\n        this.selectable = true;\r\n        this.currentSelected = this.buttons[0];\r\n\r\n        //listen to all the buttons for a click\r\n        for(let i = 0; i < this.buttons.length; i++) {\r\n            this.buttons[i].onclick = this._onButtonClicked.bind(this);\r\n        }\r\n    }\r\n    /*--------------------------------------- STATIC METHODS ------------------*/    \r\n    /*--------------------------------------- METHODS -------------------------*/\r\n    /*--------------------------------------- EVENTS --------------------------*/\r\n    _onButtonClicked(e) {\r\n        console.log(\"CALLED\");\r\n        if(this.selectable) {\r\n            //test against current if selectable\r\n            if(this.currentSelected != e.target) {\r\n                //change selected\r\n                this.currentSelected.classList.remove(\"selected\");\r\n                this.currentSelected = e.target;\r\n                this.currentSelected.classList.add(\"selected\");\r\n            }\r\n        }\r\n\r\n        //look for a data value\r\n        if(e.target.dataset.value != null) {\r\n            let clickEvent = new CustomEvent(\"button-click\", {detail:e.target.dataset.value});\r\n            this._parentElement.dispatchEvent(clickEvent);\r\n        }\r\n    }\r\n    /*--------------------------------------- OVERRIDES -----------------------*/\r\n    /*--------------------------------------- GETTERS AND SETTERS -------------*/\r\n    get ParentElement() { return this._parentElement; }\r\n}","export class ButtonToggle {\r\n    /*--------------------------------------- STATIC METHODS ------------------*/\r\n    static load() {\r\n        console.log(\"LOADED BUTTONS\");\r\n        const toggles = document.querySelectorAll(\"[data-toggle]\");\r\n        console.log(toggles);\r\n        for(let i = 0; i < toggles.length; i++) {\r\n            const el = toggles[i];\r\n            //set to false\r\n            if(el.dataset.toggle == null) el.dataset.toggle = false;\r\n\r\n            //listen to click\r\n            el.onclick = (e) => {\r\n                console.log(e.target);\r\n                const isOn = (el.dataset.toggle != null) ? el.dataset.toggle == \"true\" : false;\r\n                el.dataset.toggle = !isOn;\r\n            }            \r\n        }\r\n    }\r\n    \r\n    /*--------------------------------------- METHODS -------------------------*/\r\n    /*--------------------------------------- EVENTS --------------------------*/\r\n    /*--------------------------------------- OVERRIDES -----------------------*/\r\n    /*--------------------------------------- GETTERS AND SETTERS -------------*/\r\n}","export class Cursor {\r\n    /*--------------------------------------- STATIC METHODS ------------------*/\r\n    static load() {\r\n        Cursor._cursors = {};\r\n        Cursor._lastMousePos = {x:0, y:0};\r\n        Cursor._mouseButton = 0;\r\n\r\n        const cursors = document.querySelectorAll(\"[data-cursor]\");\r\n        console.log(cursors);\r\n        for(let i = 0; i < cursors.length; i++) {\r\n            const el = cursors[i];\r\n            //create cursor logic\r\n            Cursor._cursors[el.dataset.cursorname] = new CursorLogic(el); \r\n        }\r\n    }\r\n    \r\n    /*--------------------------------------- METHODS -------------------------*/\r\n    /*--------------------------------------- EVENTS --------------------------*/\r\n    /*--------------------------------------- OVERRIDES -----------------------*/\r\n    /*--------------------------------------- GETTERS AND SETTERS -------------*/\r\n    static get Cursors() { return Cursor._cursors; }\r\n}\r\n\r\n\r\n\r\nclass CursorLogic {\r\n    constructor(cursorElement) {\r\n        this.cursorElement = cursorElement;\r\n        this.cursorBoundsElement = cursorElement.closest(\"[data-cursor-bounds]\");\r\n\r\n        this._cursorMoveEvent = this._onCursorMove.bind(this);\r\n        this._cursorClickEvent = this._onCursorClick.bind(this);\r\n        this._cursorReleaseEvent = this._onCursorRelease.bind(this);\r\n\r\n        this._position = {x:0, y:0};\r\n        this._isClicked = false;\r\n    }\r\n\r\n    /*--------------------------------------- METHODS -------------------------*/\r\n    listen() {\r\n\r\n        //listen for cursor movement\r\n        this.cursorBoundsElement.addEventListener(\"mousemove\", this._cursorMoveEvent);\r\n        this.cursorBoundsElement.addEventListener(\"mousedown\", this._cursorClickEvent);\r\n        this.cursorBoundsElement.addEventListener(\"mouseup\", this._cursorReleaseEvent);\r\n    }\r\n\r\n    unlisten() {\r\n        //stop listen for cursor movement\r\n        this.cursorBoundsElement.removeEventListener(\"mousemove\", this._cursorMoveEvent);\r\n        this.cursorBoundsElement.removeEventListener(\"mousedown\", this._cursorClickEvent);\r\n        this.cursorBoundsElement.removeEventListener(\"mouseup\", this._cursorReleaseEvent);\r\n    }\r\n\r\n    /**Returns a value for the grid. */\r\n    _getClosest(val) {\r\n        return Math.floor(val / 17) * 17;\r\n    }\r\n    /*--------------------------------------- EVENTS --------------------------*/\r\n    _onCursorMove(e) {\r\n        this._position = {x:this._getClosest(e.clientX-this.cursorBoundsElement.offsetLeft), y:this._getClosest(e.clientY-this.cursorBoundsElement.offsetTop)};\r\n        // console.log(\"MOVE\", this._position);\r\n        // console.log(this.cursorElement);\r\n        //move cursor\r\n        this.cursorElement.style.left = `${this._position.x}px`;\r\n        this.cursorElement.style.top = `${this._position.y}px`;\r\n\r\n        // const dist = (Math.abs(this._position.x - Cursor._lastMousePos.x) + Math.abs(this._position.y - Cursor._lastMousePos.y)) / 2;\r\n        // console.log(\"DIST\", dist);\r\n        if(this._isClicked) {\r\n            let dragEvent = new CustomEvent(\"cursor-drag\", {'detail': this._position});\r\n            this.cursorElement.dispatchEvent(dragEvent);\r\n\r\n            //right click\r\n            if(Cursor._mouseButton == 2) {\r\n                console.log(\"YE\")\r\n                dragEvent = new CustomEvent(\"cursor-right-drag\", {'detail': this._position});\r\n                this.cursorElement.dispatchEvent(dragEvent);\r\n            }\r\n        }\r\n    }\r\n\r\n    _onCursorClick(e) {\r\n        Cursor._mouseButton = e.button;\r\n\r\n        this._onCursorMove(e);\r\n\r\n        this._isClicked = true;\r\n\r\n        Cursor._lastMousePos = {x:this._getClosest(e.clientX-this.cursorBoundsElement.offsetLeft), y:this._getClosest(e.clientY-this.cursorBoundsElement.offsetTop)};\r\n\r\n        let clickEvent = new CustomEvent(\"cursor-click\", {'detail': this._position});\r\n        this.cursorElement.dispatchEvent(clickEvent);\r\n\r\n        //right click\r\n        if(e.button == 2) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            clickEvent = new CustomEvent(\"cursor-right-click\", {'detail': this._position});\r\n            this.cursorElement.dispatchEvent(clickEvent);\r\n        }\r\n    }\r\n\r\n    _onCursorRelease(e) {\r\n        this._isClicked = false;\r\n    }\r\n    /*--------------------------------------- OVERRIDES -----------------------*/\r\n    /*--------------------------------------- GETTERS AND SETTERS -------------*/\r\n    get CursorElement() { return this.cursorElement; }\r\n    get Position() { return this._position; }\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvTGV2ZWwuanMiLCJzcmMvbG9naWMvR2VvbWV0cnkuanMiLCJzcmMvbG9naWMvYmxvY2svQ3JhY2tMb2dpYy5qcyIsInNyYy9sb2dpYy9ibG9jay9TbG9wZUxvZ2ljLmpzIiwic3JjL21haW4uanMiLCJzcmMvdWkvQnV0dG9uR3JvdXAuanMiLCJzcmMvdWkvQnV0dG9uVG9nZ2xlLmpzIiwic3JjL3VpL0N1cnNvci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUNBTyxLLFdBQUEsSzs7Ozs7Ozs7O0FBRUg7K0JBQ2M7QUFDVixrQkFBQSxTQUFBLEdBQUEsRUFBQTtBQUNBLGtCQUFBLE1BQUEsR0FBQSxHQUFBO0FBQ0Esa0JBQUEsT0FBQSxHQUFBLEdBQUE7O0FBRUE7QUFDQSxrQkFBQSxJQUFBLENBQVcsU0FBQSxnQkFBQSxDQUFYLGdCQUFXLENBQVgsRUFBQSxPQUFBLENBQWdFLGNBQU07QUFDbEUsbUJBQUEsS0FBQSxDQUFBLEtBQUEsR0FBb0IsTUFBcEIsTUFBQTtBQUNBLG1CQUFBLEtBQUEsQ0FBQSxNQUFBLEdBQXFCLE1BQXJCLE9BQUE7QUFGSixhQUFBO0FBSUg7QUFDRDtBQUNBO0FBQ0E7QUFDQTs7Ozs0QkFDc0I7QUFBRSxtQkFBTyxNQUFQLFNBQUE7QUFBeUI7Ozs0QkFDOUI7QUFBRSxtQkFBTyxNQUFQLE1BQUE7QUFBc0I7Ozs0QkFDdkI7QUFBRSxtQkFBTyxNQUFQLE9BQUE7QUFBdUI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ25CakQ7O0FBQ0E7O0FBQ0E7Ozs7OztJQUVPLFEsV0FBQSxRO0FBQ0gsc0JBQUEsTUFBQSxFQUFBLDBCQUFBLEVBQWdEO0FBQUE7O0FBQUE7O0FBRTVDO0FBQ0EsaUJBQUEsTUFBQSxHQUFrQjtBQUNkLHVCQURjLFdBQUE7QUFFZCxtQkFGYyxPQUFBO0FBR2QsaUJBSGMsS0FBQTtBQUlkLGtCQUFPLEVBQUMsWUFB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QVUsS0FBQSxtQkFBQSxDQUE5QixVQUFHLENBQUgsRUFBb0UsR0FBRSxLQUFBLFdBQUEsQ0FBaUIsRUFBQSxPQUFBLEdBQVUsS0FBQSxtQkFBQSxDQUF4SCxTQUE2RixDQUF0RSxFQUF2Qjs7QUFFQSxnQkFBSSxhQUFhLElBQUEsV0FBQSxDQUFBLGNBQUEsRUFBZ0MsRUFBQyxVQUFVLEtBQTVELFNBQWlELEVBQWhDLENBQWpCO0FBQ0EsaUJBQUEsYUFBQSxDQUFBLGFBQUEsQ0FBQSxVQUFBOztBQUVBO0FBQ0EsZ0JBQUcsRUFBQSxNQUFBLElBQUgsQ0FBQSxFQUFrQjtBQUNkLGtCQUFBLGNBQUE7QUFDQSxrQkFBQSxlQUFBO0FBQ0EsNkJBQWEsSUFBQSxXQUFBLENBQUEsb0JBQUEsRUFBc0MsRUFBQyxVQUFVLEtBQTlELFNBQW1ELEVBQXRDLENBQWI7QUFDQSxxQkFBQSxhQUFBLENBQUEsYUFBQSxDQUFBLFVBQUE7QUFDSDtBQUNKOzs7eUNBRUQsQyxFQUFvQjtBQUNoQixpQkFBQSxVQUFBLEdBQUEsS0FBQTtBQUNIO0FBQ0Q7QUFDQTs7Ozs0QkFDb0I7QUFBRSxtQkFBTyxLQUFQLGFBQUE7QUFBNEI7Ozs0QkFDbkM7QUFBRSxtQkFBTyxLQUFQLFNBQUE7QUFBd0IiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJleHBvcnQgY2xhc3MgTGV2ZWwge1xyXG5cclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFNUQVRJQyBNRVRIT0RTIC0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbiAgICBzdGF0aWMgbG9hZCgpIHtcclxuICAgICAgICBMZXZlbC5fdGlsZVNpemUgPSAxNztcclxuICAgICAgICBMZXZlbC5fd2lkdGggPSA2ODA7XHJcbiAgICAgICAgTGV2ZWwuX2hlaWdodCA9IDQwODtcclxuXHJcbiAgICAgICAgLy9sb2FkIGFsbCBzY2VuZXMgd2l0aCB0aGlzIHNpemVcclxuICAgICAgICBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc2NlbmVfX2JvdW5kc1wiKSkuZm9yRWFjaChlbCA9PiB7XHJcbiAgICAgICAgICAgIGVsLnN0eWxlLndpZHRoID0gYCR7TGV2ZWwuX3dpZHRofXB4YDtcclxuICAgICAgICAgICAgZWwuc3R5bGUuaGVpZ2h0ID0gYCR7TGV2ZWwuX2hlaWdodH1weGA7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICAgXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBNRVRIT0RTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIE9WRVJSSURFUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBHRVRURVJTIEFORCBTRVRURVJTIC0tLS0tLS0tLS0tLS0qL1xyXG4gICAgc3RhdGljIGdldCBUaWxlU2l6ZSgpIHsgcmV0dXJuIExldmVsLl90aWxlU2l6ZTsgfVxyXG4gICAgc3RhdGljIGdldCBXaWR0aCgpIHsgcmV0dXJuIExldmVsLl93aWR0aDsgfVxyXG4gICAgc3RhdGljIGdldCBIZWlnaHQoKSB7IHJldHVybiBMZXZlbC5faGVpZ2h0OyB9XHJcbn0iLCJpbXBvcnQgeyBMZXZlbCB9IGZyb20gXCIuLi9MZXZlbFwiO1xyXG5pbXBvcnQgeyBCdXR0b25Hcm91cCB9IGZyb20gXCIuLi91aS9CdXR0b25Hcm91cFwiO1xyXG5pbXBvcnQgeyBDcmFja0xvZ2ljIH0gZnJvbSBcIi4vYmxvY2svQ3JhY2tMb2dpY1wiO1xyXG5pbXBvcnQgeyBTbG9wZUxvZ2ljIH0gZnJvbSBcIi4vYmxvY2svU2xvcGVMb2dpY1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdlb21ldHJ5IHtcclxuICAgIGNvbnN0cnVjdG9yKGN1cnNvciwgdG9vbGJhckJ1dHRvblBhcmVudEVsZW1lbnQpIHtcclxuXHJcbiAgICAgICAgLy9mb2xsb3dzIHRoZSBnZW9tZXRyeS5zY3NzIG5hbWluZyBjb252ZW50aW9uc1xyXG4gICAgICAgIEdlb21ldHJ5LkJMT0NLUyA9IHtcclxuICAgICAgICAgICAgV2F0ZXJmYWxsIDogXCJ3YXRlcmZhbGxcIixcclxuICAgICAgICAgICAgU29saWQgOiBcInNvbGlkXCIsXHJcbiAgICAgICAgICAgIEFpciA6IFwiYWlyXCIsXHJcbiAgICAgICAgICAgIFBvbGUgOiB7SG9yaXpvbnRhbDpcInBvbGVoXCIsIFZlcnRpY2FsOlwicG9sZXZcIn0sXHJcbiAgICAgICAgICAgIFNsb3BlIDoge1RvcExlZnQ6XCJzbG9wZS10bFwiLCBUb3BSaWdodDpcInNsb3BlLXRyXCIsIEJvdHRvbUxlZnQ6XCJzbG9wZS1ibFwiLCBCb3R0b21SaWdodDpcInNsb3BlLWJyXCJ9LFxyXG4gICAgICAgICAgICBGbG9vciA6IFwiZmxvb3JcIixcclxuICAgICAgICAgICAgU2hvcnRjdXQgOiBcInNob3J0Y3V0XCIsXHJcbiAgICAgICAgICAgIFNob3J0Y3V0UGF0aCA6IFwic2hvcnRjdXQtcGF0aFwiLFxyXG4gICAgICAgICAgICBCYXJyaWVyIDogXCJzb2xpZFwiLFxyXG4gICAgICAgICAgICBHbGFzcyA6IFwiZ2xhc3NcIixcclxuICAgICAgICAgICAgQ3JhY2sgOiB7SG9yaXpvbnRhbDpcImNyYWNrLXRlcnJhaW5oXCIsIFZlcnRpY2FsOlwiY3JhY2stdGVycmFpbnZcIiwgQm90aDpcImNyYWNrLXRlcnJhaW5iXCJ9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL3NldCB1cCBibG9jayB0eXBlIGdyb3VwcyAtLSBvbmx5IG9uZSBvZiBlYWNoIHR5cGUgaXMgYWxsb3dlZCB0byBleGlzdCBpbiBhIGNlbGwgLS0gcmVuZGVycyBpbiBvcmRlciwgbG93ZXIgLSBoaWdoZXJcclxuICAgICAgICBHZW9tZXRyeS5CTE9DS19UWVBFUyA9IHtcclxuICAgICAgICAgICAgRnVsbCA6IFtHZW9tZXRyeS5CTE9DS1MuU29saWQsIEdlb21ldHJ5LkJMT0NLUy5BaXJdLCAvL2NvbmZsaWN0aW5nIGJsb2NrcywgY2Fubm90IGJlIG9uIHNhbWUgY2VsbFxyXG4gICAgICAgICAgICBTb2xpZCA6IFtHZW9tZXRyeS5CTE9DS1MuU29saWQsIC4uLk9iamVjdC52YWx1ZXMoR2VvbWV0cnkuQkxPQ0tTLlNsb3BlKSwgR2VvbWV0cnkuQkxPQ0tTLkdsYXNzLCBHZW9tZXRyeS5CTE9DS1MuRmxvb3IsIC4uLk9iamVjdC52YWx1ZXMoR2VvbWV0cnkuQkxPQ0tTLkNyYWNrKV0sXHJcbiAgICAgICAgICAgIEhvcml6b250YWwgOiBbR2VvbWV0cnkuQkxPQ0tTLlBvbGUuSG9yaXpvbnRhbF0sIC8vdXNlZCBmb3IgYmVhbXMgdGhhdCBjYW4gY3Jvc3Mtc2VjdGlvblxyXG4gICAgICAgICAgICBWZXJ0aWNhbCA6IFtHZW9tZXRyeS5CTE9DS1MuUG9sZS5WZXJ0aWNhbF0sXHJcbiAgICAgICAgICAgIE92ZXJsYXkgOiBbXCJzaG9ydGN1dC1wYXRoXCIsIFwic2hvcnRjdXRcIl1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKiBpbmNsdWRlIHNvbGlkIGJsb2NrIGluIHRoZSBob3Jpem9udGFsL3ZlcnRpY2FsIGxpc3QgYXMgdGhleSBzaG91bGRuJ3QgZXhpc3Qgb24gdGhlIHNhbWUgcGxhbmUgLS0gaWdub3JlIHNsb3BlcyB0aG91Z2ggKi9cclxuICAgICAgICBjb25zdCBzb2xpZEJsb2NrcyA9IFsuLi5HZW9tZXRyeS5CTE9DS19UWVBFUy5Tb2xpZF0uZmlsdGVyKGIgPT4gT2JqZWN0LnZhbHVlcyhHZW9tZXRyeS5CTE9DS1MuU2xvcGUpLmluZGV4T2YoYikgPT0gLTEpO1xyXG4gICAgICAgIEdlb21ldHJ5LkJMT0NLX1RZUEVTLkhvcml6b250YWwucHVzaCguLi5zb2xpZEJsb2Nrcyk7XHJcbiAgICAgICAgR2VvbWV0cnkuQkxPQ0tfVFlQRVMuVmVydGljYWwucHVzaCguLi5zb2xpZEJsb2Nrcyk7XHJcblxyXG4gICAgICAgIC8vbG9hZCBpbiBhbnkgYmxvY2sgbG9naWNcclxuICAgICAgICBDcmFja0xvZ2ljLmxvYWQoR2VvbWV0cnkuQkxPQ0tTLkNyYWNrLkhvcml6b250YWwsIEdlb21ldHJ5LkJMT0NLUy5DcmFjay5WZXJ0aWNhbCwgR2VvbWV0cnkuQkxPQ0tTLkNyYWNrLkJvdGgpO1xyXG4gICAgICAgIFNsb3BlTG9naWMubG9hZChHZW9tZXRyeS5CTE9DS1MuU2xvcGUuVG9wTGVmdCwgR2VvbWV0cnkuQkxPQ0tTLlNsb3BlLlRvcFJpZ2h0LCBHZW9tZXRyeS5CTE9DS1MuU2xvcGUuQm90dG9tTGVmdCwgR2VvbWV0cnkuQkxPQ0tTLlNsb3BlLkJvdHRvbVJpZ2h0KTtcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgdGhpcy5jdXJzb3IgPSBjdXJzb3I7XHJcbiAgICAgICAgdGhpcy50b29sYmFyQnV0dG9ucyA9IG5ldyBCdXR0b25Hcm91cCh0b29sYmFyQnV0dG9uUGFyZW50RWxlbWVudCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2xhc3RDb29yZHMgPSB7eDotMSwgeTotMX07XHJcblxyXG4gICAgICAgIHRoaXMuY3VycmVudExheWVyID0gMTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRHZW9UYWcgPSBcInNvbGlkXCI7XHJcbiAgICAgICAgdGhpcy5sYXN0QXNzZXNzZWRHZW9UYWcgPSBcInNvbGlkXCI7IC8vcmVsZWFzZWQgd2hlbiBtb3VzZSB1cCBpcyBjYWxsZWRcclxuICAgICAgICB0aGlzLmlzRGVsZXRpbmcgPSBmYWxzZTsgLy9mbGFnIGNhbGxlZCB3aGVuIGFjdGlvbiBpcyBkZWxldGVcclxuXHJcbiAgICAgICAgdGhpcy5faXNEcmFnUmVjdCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX3N0YXJ0RHJhZ0Nvb3JkcyA9IHt4OjAsIHk6MH07XHJcblxyXG4gICAgICAgIC8vaG9sZCBsYXllciBnZW9tZXRyeVxyXG4gICAgICAgIGxldCBnZW9NYXAgPSBbXTtcclxuICAgICAgICB0aGlzLl9ncmlkU2l6ZSA9IHRoaXMuX2dldENvb3Jkc0Zyb21Qb3NpdGlvbihMZXZlbC5XaWR0aCwgTGV2ZWwuSGVpZ2h0KTtcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLl9ncmlkU2l6ZSk7XHJcbiAgICAgICAgZm9yKGxldCB5ID0gMDsgeSA8IHRoaXMuX2dyaWRTaXplLnk7IHkrKykge1xyXG4gICAgICAgICAgICBsZXQgcm93ID0gW107XHJcbiAgICAgICAgICAgIGZvcihsZXQgeCA9IDA7IHggPCB0aGlzLl9ncmlkU2l6ZS54OyB4KyspXHJcbiAgICAgICAgICAgICAgICByb3cucHVzaChudWxsKTtcclxuICAgICAgICAgICAgZ2VvTWFwLnB1c2gocm93KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sYXllcnNHZW8gPSBbWy4uLmdlb01hcF0sWy4uLmdlb01hcF0sWy4uLmdlb01hcF1dO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMubGF5ZXJzR2VvKTtcclxuXHJcbiAgICAgICAgLy9saXN0ZW4gdG8gY29tcG9uZW50IGV2ZW50c1xyXG4gICAgICAgIHRoaXMuY3Vyc29yLkN1cnNvckVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImN1cnNvci1jbGlja1wiLCB0aGlzLl9vbkN1cnNvckNsaWNrLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yLkN1cnNvckVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImN1cnNvci1kcmFnXCIsIHRoaXMuX29uQ3Vyc29yRHJhZy5iaW5kKHRoaXMpKTtcclxuICAgICAgICB0aGlzLmN1cnNvci5DdXJzb3JFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjdXJzb3ItcmlnaHQtY2xpY2tcIiwgdGhpcy5fb25DdXJzb3JSaWdodENsaWNrLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yLkN1cnNvckVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImN1cnNvci1yaWdodC1kcmFnXCIsIHRoaXMuX29uQ3Vyc29yUmlnaHREcmFnLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMudG9vbGJhckJ1dHRvbnMuUGFyZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiYnV0dG9uLWNsaWNrXCIsIHRoaXMuX29uVG9vbGJhckJ1dHRvbkNsaWNrLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFNUQVRJQyBNRVRIT0RTIC0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBNRVRIT0RTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG4gICAgbGlzdGVuKCkge1xyXG4gICAgICAgIC8vbGlzdGVuIHRvIGN1cnNvclxyXG4gICAgICAgIHRoaXMuY3Vyc29yLmxpc3RlbigpO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhcIlRZUEVTXCIsIEdlb21ldHJ5LkJMT0NLX1RZUEVTLlNvbGlkKTtcclxuICAgIH1cclxuXHJcbiAgICB1bmxpc3RlbigpIHtcclxuICAgICAgICAvL3N0b3AgbGlzdGVuIHRvIGN1cnNvclxyXG4gICAgICAgIHRoaXMuY3Vyc29yLnVubGlzdGVuKCk7XHJcbiAgICB9XHJcblxyXG4gICAgX3NldEJsb2NrKGNvb3JkcywgcmVtb3ZlRHVwID0gdHJ1ZSkge1xyXG5cclxuICAgICAgICBjb25zdCBsYXllckdlbyA9IHRoaXMubGF5ZXJzR2VvW3RoaXMuY3VycmVudExheWVyLTFdO1xyXG5cclxuXHJcbiAgICAgICAgLy9zZWUgaWYgd2UgaGF2ZSBhIGdlb0RpdiBpbiB0aGlzIGNvb3JkaW5hdGVcclxuICAgICAgICAvL2lmIG91ciB0YWcgaXMgQ0xFQVIsIHJlbW92ZSBhbGwgY2hpbGRyZW4gZnJvbSB0aGlzIHBvc2l0aW9uXHJcbiAgICAgICAgaWYodGhpcy5jdXJyZW50R2VvVGFnID09IFwiY2xlYXJcIikge1xyXG4gICAgICAgICAgICBBcnJheS5mcm9tKGdlb0NvbnRhaW5lci5jaGlsZHJlbikuZm9yRWFjaChlbCA9PiBlbC5yZW1vdmUoKSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2xhc3RDb29yZHMgPSBjb29yZHM7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIC8vUFJFIFBST0NFU1NJTkdcclxuICAgICAgICAvL3Byb2Nlc3MgYmxvY2sgdHlwZSBieSBjYXRlZ29yeVxyXG5cclxuICAgICAgICBjb25zdCBnZW9EaXYgPSBsYXllckdlb1tjb29yZHMueV1bY29vcmRzLnhdO1xyXG5cclxuXHJcbiAgICAgICAgc3dpdGNoKHRoaXMubGFzdEFzc2Vzc2VkR2VvVGFnKSB7XHJcbiAgICAgICAgICAgIGNhc2UgR2VvbWV0cnkuQkxPQ0tTLlNsb3BlLlRvcExlZnQ6XHJcbiAgICAgICAgICAgIGNhc2UgR2VvbWV0cnkuQkxPQ0tTLlNsb3BlLlRvcFJpZ2h0OlxyXG4gICAgICAgICAgICBjYXNlIEdlb21ldHJ5LkJMT0NLUy5TbG9wZS5Cb3R0b21MZWZ0OlxyXG4gICAgICAgICAgICBjYXNlIEdlb21ldHJ5LkJMT0NLUy5TbG9wZS5Cb3R0b21SaWdodDpcclxuICAgICAgICAgICAgICAgIC8vaWYgdGhpcyBpcyBhIG5ldyBjb29yZCwgcmVhc3Nlc3Mgc2xvcGVcclxuICAgICAgICAgICAgICAgIGlmKGNvb3Jkcy54ICE9IHRoaXMuX2xhc3RDb29yZHMueCB8fCBjb29yZHMueSAhPSB0aGlzLl9sYXN0Q29vcmRzLnkpIHtcclxuICAgICAgICAgICAgICAgICAgICBTbG9wZUxvZ2ljLnNsb3BlVGVycmFpbihsYXllckdlbywgY29vcmRzLngsIGNvb3Jkcy55LCBHZW9tZXRyeS5CTE9DS19UWVBFUy5Tb2xpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50R2VvVGFnID0gU2xvcGVMb2dpYy5DdXJyZW50U2xvcGVUYWc7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXNzZXNzQmxvY2sobGF5ZXJHZW8sIGdlb0RpdiwgY29vcmRzLngsIGNvb3Jkcy55KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIFNsb3BlTG9naWMubmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdhbnRlZEdlb1RhZyA9IFNsb3BlTG9naWMuQ3VycmVudFNsb3BlVGFnO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHdhbnRlZEdlb1RhZyA9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZVRlcnJhaW5CbG9jayh0aGlzLmN1cnJlbnRHZW9UYWcsIGdlb0Rpdik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYWtlVGVycmFpbkJsb2NrKGxheWVyR2VvLCB3YW50ZWRHZW9UYWcsIGNvb3Jkcy54LCBjb29yZHMueSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEdlb1RhZyA9IHdhbnRlZEdlb1RhZztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Fzc2Vzc0Jsb2NrKGxheWVyR2VvLCBnZW9EaXYsIGNvb3Jkcy54LCBjb29yZHMueSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2xhc3RDb29yZHMgPSBjb29yZHM7ICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIC8qKlRyeSB0byBhZGQgdGhlIGJsb2NrLCBvciByZW1vdmUgaWYgZGVsZXRpb24gZmxhZyBpcyBzZXQuICovXHJcbiAgICBfYXNzZXNzQmxvY2sobGF5ZXJHZW8sIGdlb0RpdiwgeCwgeSkge1xyXG4gICAgICAgIC8vaWYgb3VyIGRlbGV0ZSBmbGFnIGlzIG9uLCB0cnkgdG8gcmVtb3ZlIHRoZSBibG9ja3MsIG9yIGRvbid0IG1ha2UgdGhlbVxyXG4gICAgICAgIGlmKHRoaXMuaXNEZWxldGluZykgdGhpcy5fcmVtb3ZlVGVycmFpbkJsb2NrKHRoaXMuY3VycmVudEdlb1RhZywgZ2VvRGl2KTtcclxuICAgICAgICAvL290aGVyd2lzZSwgbWFrZSB0aGUgYmxvY2tcclxuICAgICAgICBlbHNlIHRoaXMuX21ha2VUZXJyYWluQmxvY2sobGF5ZXJHZW8sIHRoaXMuY3VycmVudEdlb1RhZywgeCwgeSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlJldHVybnMgdGhlIGNvb3JkaW5hdGVzIGZyb20gdGhlIGdpdmVuIHBvc2l0aW9uLCB1c2luZyB0aGUgdGlsZSBzaXplIG9mIDE3LiAqL1xyXG4gICAgX2dldENvb3Jkc0Zyb21Qb3NpdGlvbih4LCB5KSB7XHJcbiAgICAgICAgcmV0dXJuIHt4Ok1hdGguZmxvb3IoeC9MZXZlbC5UaWxlU2l6ZSksIHk6TWF0aC5mbG9vcih5L0xldmVsLlRpbGVTaXplKX07XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKk1ha2VzIGEgdGVycmFpbiBibG9jay4gSWYgb25lIGFscmVhZHkgZXhpc3RzIG9uIHRoaXMgY2VsbCwgdGhpcyB3aWxsIHJldHVybiBmYWxzZS4gKi9cclxuICAgIF9tYWtlVGVycmFpbkJsb2NrKGFyciwgdHlwZSwgeCwgeSwgYWxsb3dTd2FwcGluZyA9IHRydWUpIHtcclxuICAgICAgICBpZih0eXBlID09IFwiXCIpIHJldHVybjtcclxuXHJcbiAgICAgICAgLy9nZXQgdGhlIGNlbGwsIG9yIGNyZWF0ZSBvbmUgaWYgbm9uZSBleGlzdHNcclxuICAgICAgICBjb25zdCBjZWxsID0gdGhpcy5fZ2V0VGVycmFpbkNvbnRhaW5lcihhcnIsIHgsIHkpO1xyXG4gICAgICAgIGNvbnN0IGFscmVhZHlFeGlzdHMgPSBBcnJheS5mcm9tKGFyclt5XVt4XS5jaGlsZHJlbikuc29tZShlbCA9PiBlbC5jbGFzc0xpc3QuY29udGFpbnModHlwZSkpO1xyXG4gICAgICAgIC8vdGVzdCB0eXBlIGFnYWluc3QgY2VsbCwgYW5kIHJlbW92ZSBhbnkgb3ZlcmxhcFxyXG4gICAgICAgIC8vbG9vayBmb3IgdHlwZSBpbiBsb29rdXBcclxuICAgICAgICBjb25zdCB0eXBlcyA9IEdlb21ldHJ5LkJMT0NLX1RZUEVTO1xyXG4gICAgICAgIGZvcihsZXQga2V5IG9mIE9iamVjdC5rZXlzKHR5cGVzKSkge1xyXG4gICAgICAgICAgICBpZih0eXBlc1trZXldLmluZGV4T2YodHlwZSkgIT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIC8vcmVtb3ZlIGFueSBibG9ja3MgdGhhdCBjb250YWluIHRoYXQga2V5IHdpdGhpbiB0aGUgdHlwZVxyXG4gICAgICAgICAgICAgICAgdHlwZXNba2V5XS5maWx0ZXIodCA9PiB0ICE9PSB0eXBlKS5mb3JFYWNoKHQgPT4gdGhpcy5fcmVtb3ZlVGVycmFpbkJsb2NrKHQsIGNlbGwpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoYWxyZWFkeUV4aXN0cykge1xyXG4gICAgICAgICAgICAvL2RpZCBub3QgYnVpbGQgdGVycmFpbiBibG9ja1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvL2NyZWF0ZSBibG9jayB0eXBlXHJcbiAgICAgICAgICAgIGxldCBnZW9EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICBnZW9EaXYuY2xhc3NMaXN0LmFkZCh0eXBlLCBcImdlb21ldHJ5XCIsIFwidGlsZVwiKTtcclxuICAgICAgICAgICAgZ2VvRGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xyXG4gICAgICAgICAgICBnZW9EaXYuc3R5bGUubGVmdCA9IGAke3ggKiBMZXZlbC5UaWxlU2l6ZX1weGA7XHJcbiAgICAgICAgICAgIGdlb0Rpdi5zdHlsZS50b3AgPSBgJHt5ICogTGV2ZWwuVGlsZVNpemV9cHhgO1xyXG4gICAgICAgICAgICBnZW9EaXYuZHJhZ2dhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vYXR0YWNoIHRvIGVsXHJcbiAgICAgICAgICAgIGNlbGwuYXBwZW5kQ2hpbGQoZ2VvRGl2KTtcclxuXHJcbiAgICAgICAgICAgIC8vc29ydCB0aGUgY2hpbGRyZW4gYnkgdGhlaXIgaGllcmFyY2h5IGluIHRoZSBibG9jayB0eXBlc1xyXG4gICAgICAgICAgICBjb25zdCBzb3J0ZWREaXYgPSBbLi4uQXJyYXkuZnJvbShjZWxsLmNoaWxkcmVuKS5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvL2dldCB0aGUgbmFtZXNcclxuICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVBID0gYS5jbGFzc0xpc3RbMF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0eXBlQiA9IGIuY2xhc3NMaXN0WzBdO1xyXG4gICAgICAgICAgICAgICAgLy90ZXN0IHRoZWlyIGxhc3QgcG9zaXRpb24gaW4gdGhlIGJsb2NrIHR5cGVzXHJcbiAgICAgICAgICAgICAgICBjb25zdCBibG9ja3MgPSBPYmplY3QudmFsdWVzKEdlb21ldHJ5LkJMT0NLX1RZUEVTKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBvc0EgPSBNYXRoLm1heCguLi5ibG9ja3MubWFwKChnciwgaSkgPT4gKGdyLmluZGV4T2YodHlwZUEpICE9IC0xKSA/IGkgOiAtMSApKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBvc0IgPSBNYXRoLm1heCguLi5ibG9ja3MubWFwKChnciwgaSkgPT4gKGdyLmluZGV4T2YodHlwZUIpICE9IC0xKSA/IGkgOiAtMSApKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9zQSA+IHBvc0IgPyAxIDogLTE7XHJcbiAgICAgICAgICAgIH0pXVxyXG5cclxuICAgICAgICAgICAgLy9yZS1hZGQgY2hpbGRyZW4gaW4gb3JkZXJcclxuICAgICAgICAgICAgc29ydGVkRGl2LmZvckVhY2goY2ggPT4gY2VsbC5hcHBlbmRDaGlsZChjaCkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgX3JlbW92ZVRlcnJhaW5CbG9jayh0eXBlLCBjZWxsKSB7XHJcbiAgICAgICAgaWYoY2VsbCA9PSBudWxsKSByZXR1cm47XHJcbiAgICAgICAgLy9sb29rIGZvciB0eXBlXHJcbiAgICAgICAgY29uc3QgZ2VvRGl2ID0gQXJyYXkuZnJvbShjZWxsLmNoaWxkcmVuKS5maW5kKGVsID0+IGVsLmNsYXNzTGlzdC5jb250YWlucyh0eXBlKSk7XHJcbiAgICAgICAgaWYoZ2VvRGl2ICE9IG51bGwpIGdlb0Rpdi5yZW1vdmUoKTtcclxuICAgIH1cclxuICAgIF9nZXRUZXJyYWluQ29udGFpbmVyKGFyciwgeCwgeSkge1xyXG4gICAgICAgIGlmKGFyclt5XVt4XSAhPSBudWxsKSByZXR1cm4gYXJyW3ldW3hdO1xyXG5cclxuICAgICAgICAvL3BsYWNlIGFuIG9iamVjdCBmb3IgdGVzdFxyXG4gICAgICAgIGxldCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIC8vVE9ETyBwdXQgb24gcHJvcGVyIGxheWVyXHJcbiAgICAgICAgdGhpcy5jdXJzb3IuQ3Vyc29yRWxlbWVudC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubGF5ZXJcIikuYXBwZW5kQ2hpbGQoZGl2KTtcclxuICAgICAgICBhcnJbeV1beF0gPSBkaXY7XHJcbiAgICAgICAgcmV0dXJuIGRpdjtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gX3Rlc3RUZXJyYWluQmxvY2soYXJyLCB4LCB5LCBjaGFuZ2VBZGpzID0gdHJ1ZSkge1xyXG4gICAgLy8gICAgIGlmKHggPCAwIHx8IHggPj0gYXJyWzBdLmxlbmd0aCB8fCB5IDwgMCB8fCB5ID49IGFyci5sZW5ndGgpIHJldHVybjtcclxuICAgIC8vICAgICBpZihhcnJbeV1beF0gPT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgIC8vICAgICAvL2dldCBvdXIgdGVycmFpbiBibG9ja1xyXG4gICAgLy8gICAgIGNvbnN0IHRlcnJhaW5CbG9jayA9IEFycmF5LmZyb20oYXJyW3ldW3hdLmNoaWxkcmVuKS5maW5kKGNoID0+IChjaC5jbGFzc0xpc3QuY29udGFpbnMoR2VvbWV0cnkuQkxPQ0tTLkNyYWNrLlZlcnRpY2FsKSB8fCBjaC5jbGFzc0xpc3QuY29udGFpbnMoR2VvbWV0cnkuQkxPQ0tTLkNyYWNrLkhvcml6b250YWwpIHx8IGNoLmNsYXNzTGlzdC5jb250YWlucyhHZW9tZXRyeS5CTE9DS1MuQ3JhY2suQm90aCkpICk7XHJcbiAgICAvLyAgICAgaWYodGVycmFpbkJsb2NrICE9IG51bGwpIHtcclxuICAgIC8vICAgICAgICAgLy90ZXN0IHRoZSBzdXJyb3VuZGluZ1xyXG4gICAgLy8gICAgICAgICBjb25zdCB7IGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSB9ID0gdGhpcy5fdGVzdEFkamFjZW50VGVycmFpbnMoYXJyLCB4LCB5KTtcclxuICAgIC8vICAgICAgICAgLy8gY29uc29sZS5sb2cobGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tKTtcclxuXHJcbiAgICAvLyAgICAgICAgIGlmKGNoYW5nZUFkanMpIHtcclxuICAgIC8vICAgICAgICAgICAgIGlmKHRvcCAhPSBudWxsKSB0aGlzLl9tYWtlVGVycmFpbkJsb2NrKGFyciwgR2VvbWV0cnkuQkxPQ0tTLkNyYWNrLlZlcnRpY2FsLCB4LCB5LTEpO1xyXG4gICAgLy8gICAgICAgICAgICAgaWYoYm90dG9tICE9IG51bGwpIHRoaXMuX21ha2VUZXJyYWluQmxvY2soYXJyLCBHZW9tZXRyeS5CTE9DS1MuQ3JhY2suVmVydGljYWwsIHgsIHkrMSk7XHJcbiAgICAvLyAgICAgICAgIH1cclxuXHJcbiAgICAvLyAgICAgICAgIC8vIGlmKGNoYW5nZUFkanMpIHtcclxuICAgIC8vICAgICAgICAgLy8gICAgIGlmKHRvcCAhPSBudWxsKSB0aGlzLl9zZXRUZXJyYWluQmxvY2sodG9wLCBcImNyYWNrLXRlcnJhaW52XCIpO1xyXG4gICAgLy8gICAgICAgICAvLyAgICAgaWYoYm90dG9tICE9IG51bGwpIHRoaXMuX3NldFRlcnJhaW5CbG9jayhib3R0b20sIFwiY3JhY2stdGVycmFpbnZcIik7XHJcbiAgICAvLyAgICAgICAgIC8vIH1cclxuXHJcbiAgICAvLyAgICAgICAgIC8vc2V0IG91cnNlbHZlc1xyXG4gICAgLy8gICAgICAgICAvLyBpZigodG9wICE9IG51bGwgfHwgYm90dG9tICE9IG51bGwpICYmIChsZWZ0ICE9IG51bGwgfHwgcmlnaHQgIT0gbnVsbCkpIHRoaXMuX3NldFRlcnJhaW5CbG9jayh0ZXJyYWluQmxvY2ssIFwiY3JhY2stdGVycmFpbmJcIik7XHJcbiAgICAvLyAgICAgfVxyXG5cclxuICAgIC8vIH1cclxuXHJcbiAgICBfdGVzdFRlcnJhaW5CbG9jayhhcnIsIHgsIHksIGNoYW5nZUFkanMgPSB0cnVlKSB7XHJcbiAgICAgICAgaWYoeCA8IDAgfHwgeCA+PSBhcnJbMF0ubGVuZ3RoIHx8IHkgPCAwIHx8IHkgPj0gYXJyLmxlbmd0aCkgcmV0dXJuO1xyXG4gICAgICAgIGlmKGFyclt5XVt4XSA9PSBudWxsKSByZXR1cm47XHJcblxyXG4gICAgICAgIC8vZ2V0IG91ciB0ZXJyYWluIGJsb2NrXHJcbiAgICAgICAgY29uc3QgdGVycmFpbkJsb2NrID0gQXJyYXkuZnJvbShhcnJbeV1beF0uY2hpbGRyZW4pLmZpbmQoY2ggPT4gKGNoLmNsYXNzTGlzdC5jb250YWlucyhHZW9tZXRyeS5CTE9DS1MuQ3JhY2suVmVydGljYWwpIHx8IGNoLmNsYXNzTGlzdC5jb250YWlucyhHZW9tZXRyeS5CTE9DS1MuQ3JhY2suSG9yaXpvbnRhbCkgfHwgY2guY2xhc3NMaXN0LmNvbnRhaW5zKEdlb21ldHJ5LkJMT0NLUy5DcmFjay5Cb3RoKSkgKTtcclxuICAgICAgICBpZih0ZXJyYWluQmxvY2sgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvL3Rlc3QgdGhlIHN1cnJvdW5kaW5nXHJcbiAgICAgICAgICAgIGNvbnN0IHsgbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tIH0gPSB0aGlzLl90ZXN0QWRqYWNlbnRUZXJyYWlucyhhcnIsIHgsIHkpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhsZWZ0LCByaWdodCwgdG9wLCBib3R0b20pO1xyXG5cclxuICAgICAgICAgICAgaWYoY2hhbmdlQWRqcykge1xyXG4gICAgICAgICAgICAgICAgaWYodG9wICE9IG51bGwpIHRoaXMuX21ha2VUZXJyYWluQmxvY2soYXJyLCBHZW9tZXRyeS5CTE9DS1MuQ3JhY2suVmVydGljYWwsIHgsIHktMSk7XHJcbiAgICAgICAgICAgICAgICBpZihib3R0b20gIT0gbnVsbCkgdGhpcy5fbWFrZVRlcnJhaW5CbG9jayhhcnIsIEdlb21ldHJ5LkJMT0NLUy5DcmFjay5WZXJ0aWNhbCwgeCwgeSsxKTtcclxuICAgICAgICAgICAgICAgIGlmKGxlZnQgIT0gbnVsbCAmJiAodG9wICE9IG51bGwgfHwgYm90dG9tICE9IG51bGwpKSB0aGlzLl9tYWtlVGVycmFpbkJsb2NrKGFyciwgR2VvbWV0cnkuQkxPQ0tTLkNyYWNrLkJvdGgsIHgtMSwgeSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKGxlZnQgIT0gbnVsbCkgdGhpcy5fbWFrZVRlcnJhaW5CbG9jayhhcnIsIEdlb21ldHJ5LkJMT0NLUy5DcmFjay5Ib3Jpem9udGFsLCB4LTEsIHkpO1xyXG4gICAgICAgICAgICAgICAgaWYocmlnaHQgIT0gbnVsbCAmJiAodG9wICE9IG51bGwgfHwgYm90dG9tICE9IG51bGwpKSB0aGlzLl9tYWtlVGVycmFpbkJsb2NrKGFyciwgR2VvbWV0cnkuQkxPQ0tTLkNyYWNrLkJvdGgsIHgrMSwgeSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKHJpZ2h0ICE9IG51bGwpIHRoaXMuX21ha2VUZXJyYWluQmxvY2soYXJyLCBHZW9tZXRyeS5CTE9DS1MuQ3JhY2suSG9yaXpvbnRhbCwgeCsxLCB5KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gaWYoY2hhbmdlQWRqcykge1xyXG4gICAgICAgICAgICAvLyAgICAgaWYodG9wICE9IG51bGwpIHRoaXMuX3NldFRlcnJhaW5CbG9jayh0b3AsIFwiY3JhY2stdGVycmFpbnZcIik7XHJcbiAgICAgICAgICAgIC8vICAgICBpZihib3R0b20gIT0gbnVsbCkgdGhpcy5fc2V0VGVycmFpbkJsb2NrKGJvdHRvbSwgXCJjcmFjay10ZXJyYWludlwiKTtcclxuICAgICAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAgICAgLy9zZXQgb3Vyc2VsdmVzXHJcbiAgICAgICAgICAgIGlmKCh0b3AgIT0gbnVsbCB8fCBib3R0b20gIT0gbnVsbCkgJiYgKGxlZnQgIT0gbnVsbCB8fCByaWdodCAhPSBudWxsKSkgdGhpcy5fbWFrZVRlcnJhaW5CbG9jayhhcnIsIEdlb21ldHJ5LkJMT0NLUy5DcmFjay5Cb3RoLCB4LCB5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlJldHVybnMgdGhlIHRlcnJhaW4gbmFtZSBpZiBpdCBmaW5kcyBvbmUgKi9cclxuICAgIF9sb29rRm9yVGVycmFpblR5cGUoY2VsbCwgLi4udHlwZSkge1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gQXJyYXkuZnJvbShjZWxsLmNoaWxkcmVuKTtcclxuICAgICAgICAgICAgZm9yKGxldCBuID0gMDsgbiA8IGNoaWxkcmVuLmxlbmd0aDsgbisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZihjaGlsZHJlbltuXS5jbGFzc0xpc3QuY29udGFpbnModHlwZVtpXSkpIHJldHVybiB0eXBlW2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIF90ZXN0QWRqYWNlbnRUZXJyYWlucyhhcnIsIHgsIHkpIHtcclxuICAgICAgICBjb25zdCBjdXJyQmxvY2tEaXYgPSBhcnJbeV1beF07XHJcbiAgICAgICAgbGV0IHRlcnJhaW5CbG9ja3MgPSB7bGVmdDpudWxsLCByaWdodDpudWxsLCB0b3A6bnVsbCwgYm90dG9tOm51bGx9O1xyXG5cclxuICAgICAgICAvL3Rlc3QgbGVmdFxyXG4gICAgICAgIGlmKHgtMSA+PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrID0gYXJyW3ldW3gtMV07XHJcbiAgICAgICAgICAgIHRlcnJhaW5CbG9ja3MubGVmdCA9IHRoaXMuX2dldFRlcnJhaW5CbG9jayhibG9jayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vdGVzdCByaWdodFxyXG4gICAgICAgIGlmKHgrMSA8IGFyclswXS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3QgYmxvY2sgPSBhcnJbeV1beCsxXTtcclxuICAgICAgICAgICAgdGVycmFpbkJsb2Nrcy5yaWdodCA9IHRoaXMuX2dldFRlcnJhaW5CbG9jayhibG9jayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vdGVzdCB0b3BcclxuICAgICAgICBpZih5LTEgPj0gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBibG9jayA9IGFyclt5LTFdW3hdO1xyXG4gICAgICAgICAgICB0ZXJyYWluQmxvY2tzLnRvcCA9IHRoaXMuX2dldFRlcnJhaW5CbG9jayhibG9jayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vdGVzdCBib3R0b21cclxuICAgICAgICBpZih5KzEgPCBhcnIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrID0gYXJyW3krMV1beF07XHJcbiAgICAgICAgICAgIHRlcnJhaW5CbG9ja3MuYm90dG9tID0gdGhpcy5fZ2V0VGVycmFpbkJsb2NrKGJsb2NrKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRlcnJhaW5CbG9ja3M7XHJcbiAgICB9XHJcbiAgICBfZ2V0VGVycmFpbkJsb2NrKGJsb2NrKSB7XHJcbiAgICAgICAgaWYoYmxvY2sgPT0gbnVsbCkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oYmxvY2suY2hpbGRyZW4pLmZpbmQoY2ggPT4gKGNoLmNsYXNzTGlzdC5jb250YWlucygnY3JhY2stdGVycmFpbmgnKSB8fCBjaC5jbGFzc0xpc3QuY29udGFpbnMoJ2NyYWNrLXRlcnJhaW52JykgfHwgY2guY2xhc3NMaXN0LmNvbnRhaW5zKCdjcmFjay10ZXJyYWluYicpICkpO1xyXG4gICAgfVxyXG4gICAgX3NldFRlcnJhaW5CbG9jayhibG9jaywgdHlwZSkge1xyXG4gICAgICAgIGlmKGJsb2NrID09IG51bGwpIHJldHVybjtcclxuICAgICAgICAvL3JlbW92ZSBvbGQgY2xhc3NsaXN0c1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGJsb2NrKTtcclxuICAgICAgICBibG9jay5jbGFzc05hbWUgPSBcImdlb21ldHJ5XCI7XHJcbiAgICAgICAgY29uc29sZS5sb2coYmxvY2spO1xyXG4gICAgICAgIC8vZ2l2ZSBuZXcgY2xhc3NcclxuICAgICAgICBibG9jay5jbGFzc0xpc3QuYWRkKHR5cGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVWRU5UUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbiAgICBfb25DdXJzb3JDbGljayhlKSB7XHJcbiAgICAgICAgdGhpcy5faXNEcmFnUmVjdCA9IGZhbHNlO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gZS5kZXRhaWw7XHJcblxyXG4gICAgICAgIC8vc2V0IHRoZSBkZWxldGlvbiBmbGFnIGJ5IHNlZWluZyBpZiB0aGlzIHR5cGUgb2YgdGVycmFpbiBleGlzdHMgb24gdGhpcyBibG9jayBwb3NpdGlvbiBhbHJlYWR5XHJcbiAgICAgICAgY29uc3QgY29vcmRzID0gdGhpcy5fZ2V0Q29vcmRzRnJvbVBvc2l0aW9uKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpO1xyXG4gICAgICAgIGNvbnN0IGNlbGwgPSB0aGlzLmxheWVyc0dlb1t0aGlzLmN1cnJlbnRMYXllcl1bY29vcmRzLnldW2Nvb3Jkcy54XTtcclxuICAgICAgICBpZihjZWxsID09IG51bGwpIHRoaXMuaXNEZWxldGluZyA9IGZhbHNlO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5fbG9va0ZvclRlcnJhaW5UeXBlKGNlbGwsIHRoaXMuY3VycmVudEdlb1RhZyk7XHJcbiAgICAgICAgICAgIHRoaXMuaXNEZWxldGluZyA9ICh0ID09IHRoaXMuY3VycmVudEdlb1RhZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9zZXRCbG9jayhjb29yZHMpO1xyXG4gICAgfVxyXG4gICAgX29uQ3Vyc29yRHJhZyhlKSB7XHJcbiAgICAgICAgaWYodGhpcy5faXNEcmFnUmVjdCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGUuZGV0YWlsO1xyXG4gICAgICAgIC8vZ2V0IGNvb3JkXHJcbiAgICAgICAgY29uc3QgY29vcmRzID0gdGhpcy5fZ2V0Q29vcmRzRnJvbVBvc2l0aW9uKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpO1xyXG4gICAgICAgIC8vaWYgY29vcmQgaXMgc2FtZSBhcyBsYXN0IGNvb3JkLCBkb24ndCBkbyBhbnl0aGluZ1xyXG4gICAgICAgIGlmKGNvb3Jkcy54ID09IHRoaXMuX2xhc3RDb29yZHMueCAmJiBjb29yZHMueSA9PSB0aGlzLl9sYXN0Q29vcmRzLnkpIHJldHVybjtcclxuICAgICAgICB0aGlzLl9zZXRCbG9jayhjb29yZHMsIGZhbHNlKTtcclxuICAgIH1cclxuICAgIC8vaGFuZGxlcyBidWlsZGluZyByZWN0IG9mIHNlbGVjdGlvblxyXG4gICAgX29uQ3Vyc29yUmlnaHRDbGljayhlKSB7XHJcbiAgICAgICAgdGhpcy5faXNEcmFnUmVjdCA9IHRydWU7XHJcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBlLmRldGFpbDtcclxuICAgICAgICAvL2dldCBjb29yZFxyXG4gICAgICAgIGNvbnN0IGNvb3JkcyA9IHRoaXMuX2dldENvb3Jkc0Zyb21Qb3NpdGlvbihwb3NpdGlvbi54LCBwb3NpdGlvbi55KTtcclxuICAgICAgICB0aGlzLl9zdGFydERyYWdDb29yZHMgPSBjb29yZHM7XHJcbiAgICB9XHJcbiAgICBfb25DdXJzb3JSaWdodERyYWcoZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiTE9PSyBBVCBNRVwiKTtcclxuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGUuZGV0YWlsO1xyXG4gICAgICAgIC8vZ2V0IGNvb3JkXHJcbiAgICAgICAgY29uc3QgY29vcmRzID0gdGhpcy5fZ2V0Q29vcmRzRnJvbVBvc2l0aW9uKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpO1xyXG5cclxuICAgICAgICBmb3IobGV0IHkgPSB0aGlzLl9zdGFydERyYWdDb29yZHMueTsgeSA8IGNvb3Jkcy55OyB5KyspIHtcclxuICAgICAgICAgICAgZm9yKGxldCB4ID0gdGhpcy5fc3RhcnREcmFnQ29vcmRzLng7IHggPCBjb29yZHMueDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRCbG9jayh7eCwgeX0sIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIF9vblRvb2xiYXJCdXR0b25DbGljayhlKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBlLmRldGFpbDtcclxuICAgICAgICBjb25zb2xlLmxvZyh2YWx1ZSk7XHJcblxyXG4gICAgICAgIHN3aXRjaCh2YWx1ZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwic2xvcGVcIjpcclxuICAgICAgICAgICAgICAgIC8vaGFuZGxlIHNsb3BlIHJlbmFtaW5nXHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRHZW9UYWcgPSBHZW9tZXRyeS5CTE9DS1MuU2xvcGUuVG9wTGVmdDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwidHVubmVsXCI6XHJcbiAgICAgICAgICAgICAgICAvL2hhbmRsZSB0dW5uZWwgcmVuYW1pbmdcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEdlb1RhZyA9IEdlb21ldHJ5LkJMT0NLUy5DcmFjay5Ib3Jpem9udGFsO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJzaG9ydGN1dFwiOlxyXG4gICAgICAgICAgICAgICAgLy9oYW5kbGUgc2hvcnRjdXQgZW50cmFuY2VcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEdlb1RhZyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRHZW9UYWcgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubGFzdEFzc2Vzc2VkR2VvVGFnID0gdGhpcy5jdXJyZW50R2VvVGFnO1xyXG4gICAgfVxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gT1ZFUlJJREVTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEdFVFRFUlMgQU5EIFNFVFRFUlMgLS0tLS0tLS0tLS0tLSovXHJcbn0iLCIvKipBIGNsYXNzIHRvIGhhbmRsZSBtYW5pcHVsYXRpbmcgY3JhY2sgdGVycmFpbiBkYXRhIGZyb20gdGhlIGdlb21ldHJ5IGNsYXNzLiAqL1xyXG5leHBvcnQgY2xhc3MgQ3JhY2tMb2dpYyB7XHJcbiAgICBzdGF0aWMgbG9hZChoVGFnLCB2VGFnLCBiVGFnKSB7XHJcbiAgICAgICAgQ3JhY2tMb2dpYy5oVGFnID0gaFRhZztcclxuICAgICAgICBDcmFja0xvZ2ljLnZUYWcgPSB2VGFnO1xyXG4gICAgICAgIENyYWNrTG9naWMuYlRhZyA9IGJUYWc7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IHdpdGggZGVzaXJlZCBibG9jayB0YWdzLlxyXG4gICAgICogQHBhcmFtIHsqfSBhcnIgXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geCBcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5IFxyXG4gICAgICogQHJldHVybnMgQW4gYXJyYXkgd2l0aCBkZXNpcmVkIGJsb2NrIHRhZ3MgLSB7c2VsZjpzdHJpbmcsIGxlZnQ6c3RyaW5nLCByaWdodDpzdHJpbmcsIHRvcDpzdHJpbmcsIGJvdHRvbTpzdHJpbmd9LlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JhY2tUZXJyYWluKGFyciwgeCwgeSkge1xyXG4gICAgICAgIC8vZmluZCBhbGwgb2Ygb3VyIGNyYWNrZWQgdGVycmFpblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiUkFXXCIsIGFycik7XHJcbiAgICAgICAgbGV0IGNyYWNrZWRUZXJyYWluID0gQ3JhY2tMb2dpYy5fZ2V0Q3JhY2tNYXAoYXJyKTtcclxuICAgICAgICBjcmFja2VkVGVycmFpblt5XVt4XSA9IHRydWU7IC8vc2V0IG91ciBibG9jayBhcyB0cnVlIGFzIHdlbGxcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJURVJSQUlOIENSQUNLXCIsIGNyYWNrZWRUZXJyYWluKTtcclxuXHJcbiAgICAgICAgbGV0IGRlc2lyZWRDcmFja3MgPSB7c2VsZjpudWxsLCBsZWZ0Om51bGwsIHJpZ2h0Om51bGwsIHRvcDpudWxsLCBib3R0b206bnVsbH07XHJcbiAgICAgICAgLy9yZXF1ZXN0IHR5cGVzIGZvciBlYWNoIGNvcm5lci9zZWxmXHJcbiAgICAgICAgZGVzaXJlZENyYWNrcy5sZWZ0ID0gdGhpcy5fZmluZERlc2lyZWRDcmFjayhjcmFja2VkVGVycmFpbiwgeC0xLCB5KTtcclxuICAgICAgICBkZXNpcmVkQ3JhY2tzLnJpZ2h0ID0gdGhpcy5fZmluZERlc2lyZWRDcmFjayhjcmFja2VkVGVycmFpbiwgeCsxLCB5KTtcclxuICAgICAgICBkZXNpcmVkQ3JhY2tzLnRvcCA9IHRoaXMuX2ZpbmREZXNpcmVkQ3JhY2soY3JhY2tlZFRlcnJhaW4sIHgsIHktMSk7XHJcbiAgICAgICAgZGVzaXJlZENyYWNrcy5ib3R0b20gPSB0aGlzLl9maW5kRGVzaXJlZENyYWNrKGNyYWNrZWRUZXJyYWluLCB4LCB5KzEpO1xyXG4gICAgICAgIGRlc2lyZWRDcmFja3Muc2VsZiA9IHRoaXMuX2ZpbmREZXNpcmVkQ3JhY2soY3JhY2tlZFRlcnJhaW4sIHgsIHkpO1xyXG5cclxuICAgICAgICByZXR1cm4gZGVzaXJlZENyYWNrcztcclxuICAgIH1cclxuXHJcblxyXG4gICAgc3RhdGljIF9maW5kRGVzaXJlZENyYWNrKGNyYWNrQXJyLCB4LCB5KSB7XHJcbiAgICAgICAgLy9zZWUgaWYgd2UgY2FuIGV2ZW4gY2hhbmdlIHRoaXMgY3JhY2tcclxuICAgICAgICBpZih4IDwgMCB8fCB4ID4gKGNyYWNrQXJyWzBdLmxlbmd0aC0xKSkgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgaWYoeSA8IDAgfHwgeSA+IChjcmFja0Fyci5sZW5ndGgtMSkpIHJldHVybiBcIlwiO1xyXG4gICAgICAgIGlmKCFjcmFja0Fyclt5XVt4XSkgcmV0dXJuIFwiXCI7XHJcblxyXG4gICAgICAgIGxldCBkZXNpcmVkQ3JhY2sgPSBcIlwiO1xyXG4gICAgICAgIGxldCBzaWRlcyA9IHtsZWZ0OmZhbHNlLCByaWdodDpmYWxzZSwgdG9wOmZhbHNlLCBib3R0b206ZmFsc2V9O1xyXG4gICAgICAgIC8vc2V0IGxlZnRcclxuICAgICAgICBpZigoeC0xKSA+PSAwKSBpZihjcmFja0Fyclt5XVt4LTFdKSBzaWRlcy5sZWZ0ID0gdHJ1ZTtcclxuICAgICAgICAvL3NldCByaWdodFxyXG4gICAgICAgIGlmKCh4KzEpID4gKGNyYWNrQXJyWzBdLmxlbmd0aC0xKSkgaWYoY3JhY2tBcnJbeV1beCsxXSkgc2lkZXMucmlnaHQgPSB0cnVlO1xyXG4gICAgICAgIC8vc2V0IHRvcFxyXG4gICAgICAgIGlmKCh5LTEpID49IDApIGlmKGNyYWNrQXJyW3ktMV1beF0pIHNpZGVzLnRvcCA9IHRydWU7XHJcbiAgICAgICAgLy9zZXQgYm90dG9tXHJcbiAgICAgICAgaWYoKHkrMSkgPiAoY3JhY2tBcnIubGVuZ3RoLTEpKSBpZihjcmFja0Fyclt5KzFdW3hdKSBzaWRlcy5ib3R0b20gPSB0cnVlO1xyXG5cclxuICAgICAgICAvL3Rlc3QgaG9yL3ZlclxyXG4gICAgICAgIGRlc2lyZWRDcmFjayA9IChzaWRlcy50b3AgfHwgc2lkZXMuYm90dG9tKSA/IENyYWNrTG9naWMudlRhZyA6IENyYWNrTG9naWMuaFRhZztcclxuICAgICAgICAvL3Rlc3QgYm90aFxyXG4gICAgICAgIGlmKChzaWRlcy50b3AgfHwgc2lkZXMuYm90dG9tKSAmJiAoc2lkZXMubGVmdCB8fCBzaWRlcy5yaWdodCkpIGRlc2lyZWRDcmFjayA9IENyYWNrTG9naWMuYlRhZztcclxuXHJcbiAgICAgICAgcmV0dXJuIGRlc2lyZWRDcmFjaztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqUmV0dXJucyBhIG1hcCBvZiB0cnVlL2ZhbHNlIHZhbHVlcyBkZXBlbmRpbmcgb24gd2hldGhlciB0aGF0IGNlbGwgaGFzIGEgY3JhY2tlZCB0ZXJyYWluIGJsb2NrLiAqL1xyXG4gICAgc3RhdGljIF9nZXRDcmFja01hcChhcnIpIHtcclxuICAgICAgICByZXR1cm4gYXJyLm1hcChyb3cgPT4ge1xyXG4gICAgICAgICAgICBpZihyb3cgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJvdy5tYXAoZWwgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYoZWwgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBBcnJheS5mcm9tKGVsLmNoaWxkcmVuKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGRyZW4uc29tZShkaXYgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGRpdi5jaGlsZHJlbiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAgZGl2LmNsYXNzTGlzdC5jb250YWlucyhDcmFja0xvZ2ljLmhUYWcpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXYuY2xhc3NMaXN0LmNvbnRhaW5zKENyYWNrTG9naWMudlRhZykgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpdi5jbGFzc0xpc3QuY29udGFpbnMoQ3JhY2tMb2dpYy5iVGFnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxufSIsIi8qKkEgY2xhc3MgdG8gaGFuZGxlIG1hbmlwdWxhdGluZyBzbG9wZSB0ZXJyYWluIGRhdGEgZnJvbSB0aGUgZ2VvbWV0cnkgY2xhc3MuICovXHJcbmV4cG9ydCBjbGFzcyBTbG9wZUxvZ2ljIHtcclxuICAgIHN0YXRpYyBsb2FkKHRMVGFnLCB0UlRhZywgYkxUYWcsIGJSVGFnKSB7XHJcbiAgICAgICAgU2xvcGVMb2dpYy50TFRhZyA9IHRMVGFnO1xyXG4gICAgICAgIFNsb3BlTG9naWMudFJUYWcgPSB0UlRhZztcclxuICAgICAgICBTbG9wZUxvZ2ljLmJMVGFnID0gYkxUYWc7XHJcbiAgICAgICAgU2xvcGVMb2dpYy5iUlRhZyA9IGJSVGFnO1xyXG5cclxuICAgICAgICBTbG9wZUxvZ2ljLl9sYXllckFycmF5ID0gbnVsbDtcclxuICAgICAgICBTbG9wZUxvZ2ljLl9zbG9wZUluZGV4ID0gMDtcclxuICAgICAgICBTbG9wZUxvZ2ljLl9zbG9wZXMgPSBbXTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgc3RhdGljIHNsb3BlVGVycmFpbihhcnIsIHgsIHksIHNvbGlkQmxvY2tUeXBlcykge1xyXG5cclxuICAgICAgICAvL3JlbW92ZSBvdXIgc2xvcGVzIGZyb20gdGhlIHNvbGlkIGJsb2NrIHR5cGVzXHJcbiAgICAgICAgc29saWRCbG9ja1R5cGVzID0gc29saWRCbG9ja1R5cGVzLmZpbHRlcih0ID0+IHQgIT0gU2xvcGVMb2dpYy50TFRhZyAmJiB0ICE9IFNsb3BlTG9naWMudFJUYWcgJiYgdCAhPSBTbG9wZUxvZ2ljLmJMVGFnICYmIHQgIT0gU2xvcGVMb2dpYy5iUlRhZyk7XHJcblxyXG4gICAgICAgIC8vIGlmKFNsb3BlTG9naWMuX3Nsb3Blcy5sZW5ndGggPiAwKSByZXR1cm4gU2xvcGVMb2dpYztcclxuXHJcbiAgICAgICAgU2xvcGVMb2dpYy5yZXNldCgpO1xyXG4gICAgICAgIFNsb3BlTG9naWMuX2xheWVyQXJyYXkgPSBhcnI7XHJcblxyXG4gICAgICAgIC8vaWYgdGhpcyBibG9jayBpcyBzb2xpZCwgaWdub3JlXHJcbiAgICAgICAgaWYodGhpcy5faXNTb2xpZEJsb2NrKGFyciwgeCwgeSwgc29saWRCbG9ja1R5cGVzKSkgcmV0dXJuIFNsb3BlTG9naWM7XHJcblxyXG4gICAgICAgIGxldCBzdXJyb3VuZGluZ0Jsb2NrcyA9IHtsZWZ0Om51bGwsIHJpZ2h0Om51bGwsIHRvcDpudWxsLCBib3R0b206bnVsbH07XHJcblxyXG4gICAgICAgIC8vcmVxdWVzdCB0eXBlcyBmb3IgZWFjaCBjb3JuZXIvc2VsZlxyXG4gICAgICAgIHN1cnJvdW5kaW5nQmxvY2tzLmxlZnQgPSB0aGlzLl9pc1NvbGlkQmxvY2soYXJyLCB4LTEsIHksIHNvbGlkQmxvY2tUeXBlcyk7XHJcbiAgICAgICAgc3Vycm91bmRpbmdCbG9ja3MucmlnaHQgPSB0aGlzLl9pc1NvbGlkQmxvY2soYXJyLCB4KzEsIHksIHNvbGlkQmxvY2tUeXBlcyk7XHJcbiAgICAgICAgc3Vycm91bmRpbmdCbG9ja3MudG9wID0gdGhpcy5faXNTb2xpZEJsb2NrKGFyciwgeCwgeS0xLCBzb2xpZEJsb2NrVHlwZXMpO1xyXG4gICAgICAgIHN1cnJvdW5kaW5nQmxvY2tzLmJvdHRvbSA9IHRoaXMuX2lzU29saWRCbG9jayhhcnIsIHgsIHkrMSwgc29saWRCbG9ja1R5cGVzKTtcclxuXHJcbiAgICAgICAgY29uc3Qge2xlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbX0gPSBzdXJyb3VuZGluZ0Jsb2NrcztcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJTVVJST1VORElORzpcIiwgc3Vycm91bmRpbmdCbG9ja3MpO1xyXG5cclxuICAgICAgICAvL2NvbXBhcmUgZWRnZXNcclxuICAgICAgICBpZih0b3AgJiYgbGVmdCkgU2xvcGVMb2dpYy5fc2xvcGVzLnB1c2goU2xvcGVMb2dpYy50TFRhZyk7XHJcbiAgICAgICAgaWYodG9wICYmIHJpZ2h0KSBTbG9wZUxvZ2ljLl9zbG9wZXMucHVzaChTbG9wZUxvZ2ljLnRSVGFnKTtcclxuICAgICAgICBpZihib3R0b20gJiYgbGVmdCkgU2xvcGVMb2dpYy5fc2xvcGVzLnB1c2goU2xvcGVMb2dpYy5iTFRhZyk7XHJcbiAgICAgICAgaWYoYm90dG9tICYmIHJpZ2h0KSBTbG9wZUxvZ2ljLl9zbG9wZXMucHVzaChTbG9wZUxvZ2ljLmJSVGFnKTtcclxuXHJcbiAgICAgICAgaWYobGVmdCAmJiByaWdodCkgU2xvcGVMb2dpYy5fc2xvcGVzID0gW107XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiTVkgU0xPUEVTXCIsIFNsb3BlTG9naWMuX3Nsb3Blcyk7XHJcblxyXG4gICAgICAgIHJldHVybiBTbG9wZUxvZ2ljO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKkdldCB0aGUgbmV4dCBwb3NzaWJsZSBzbG9wZSBmb3IgdGhpcyBibG9jay4qL1xyXG4gICAgc3RhdGljIG5leHQoKSB7XHJcbiAgICAgICAgU2xvcGVMb2dpYy5fc2xvcGVJbmRleCsrO1xyXG4gICAgICAgIGlmKFNsb3BlTG9naWMuX3Nsb3BlSW5kZXggPiBTbG9wZUxvZ2ljLl9zbG9wZXMubGVuZ3RoKSBTbG9wZUxvZ2ljLl9zbG9wZUluZGV4ID0gMDtcclxuICAgICAgICByZXR1cm4gU2xvcGVMb2dpYztcclxuICAgIH1cclxuICAgIFxyXG4gICAgc3RhdGljIHJlc2V0KCkge1xyXG4gICAgICAgIFNsb3BlTG9naWMuX3Nsb3BlcyA9IFtdO1xyXG4gICAgICAgIFNsb3BlTG9naWMuX3Nsb3BlSW5kZXggPSAwO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBzdGF0aWMgX2lzU29saWRCbG9jayhhcnIsIHgsIHksIHNvbGlkQmxvY2tUeXBlcykge1xyXG4gICAgICAgIC8vc2VlIGlmIHdlIGNhbiBldmVuIGNoYW5nZSB0aGlzIGNyYWNrXHJcbiAgICAgICAgaWYoeCA8IDAgfHwgeCA+IChhcnJbMF0ubGVuZ3RoLTEpKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgaWYoeSA8IDAgfHwgeSA+IChhcnIubGVuZ3RoLTEpKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgaWYoIWFyclt5XVt4XSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICBjb25zdCBibG9jayA9IGFyclt5XVt4XTtcclxuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IEFycmF5LmZyb20oYmxvY2suY2hpbGRyZW4pO1xyXG4gICAgICAgIGlmKGNoaWxkcmVuID09IG51bGwpIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gY2hpbGRyZW4uc29tZShjaCA9PiB7XHJcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzb2xpZEJsb2NrVHlwZXMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICBpZihjaC5jbGFzc0xpc3QuY29udGFpbnMoc29saWRCbG9ja1R5cGVzW2ldKSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgc3RhdGljIGdldCBDdXJyZW50U2xvcGVUYWcoKSB7IHJldHVybiAoKFNsb3BlTG9naWMuX3Nsb3Blcy5sZW5ndGggPD0gMCkgfHwgKFNsb3BlTG9naWMuX3Nsb3BlSW5kZXggPT0gU2xvcGVMb2dpYy5fc2xvcGVzLmxlbmd0aCkgKSA/IFwiXCIgOiBTbG9wZUxvZ2ljLl9zbG9wZXNbU2xvcGVMb2dpYy5fc2xvcGVJbmRleF07IH1cclxuXHJcbn0iLCJpbXBvcnQgeyBCdXR0b25Ub2dnbGUgfSBmcm9tIFwiLi91aS9CdXR0b25Ub2dnbGVcIjtcclxuaW1wb3J0IHsgQ3Vyc29yIH0gZnJvbSBcIi4vdWkvQ3Vyc29yXCI7XHJcbmltcG9ydCB7IEdlb21ldHJ5IH0gZnJvbSBcIi4vbG9naWMvR2VvbWV0cnlcIjtcclxuaW1wb3J0IHsgTGV2ZWwgfSBmcm9tIFwiLi9MZXZlbFwiO1xyXG5cclxuXHJcblxyXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBTVEFUSUMgTUVUSE9EUyAtLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5mdW5jdGlvbiBtYWluKCkge1xyXG4gICAgY29uc29sZS5sb2coXCJTVEFSVEVEXCIpO1xyXG4gICAgLy9sb2FkIGNvbXBvbmVudHNcclxuICAgIEJ1dHRvblRvZ2dsZS5sb2FkKCk7XHJcbiAgICBDdXJzb3IubG9hZCgpO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKEN1cnNvci5DdXJzb3JzKTtcclxuXHJcbiAgICAvL2xvYWQgbGV2ZWxcclxuICAgIExldmVsLmxvYWQoKTtcclxuXHJcbiAgICAvL2xvYWQgZW52c1xyXG4gICAgbmV3IEdlb21ldHJ5KEN1cnNvci5DdXJzb3JzWydnZW9tZXRyeS1jdXJzb3InXSwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50b29sYmFyLmdlb21ldHJ5XCIpKS5saXN0ZW4oKTtcclxuXHJcbiAgICBkb2N1bWVudC5ib2R5LmRyYWdnYWJsZSA9IGZhbHNlO1xyXG4gICAgZG9jdW1lbnQub25jb250ZXh0bWVudSA9IChlKSA9PiB7IHJldHVybiBmYWxzZTsgfVxyXG59XHJcblxyXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBNRVRIT0RTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFVkVOVFMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBPVkVSUklERVMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBHRVRURVJTIEFORCBTRVRURVJTIC0tLS0tLS0tLS0tLS0qL1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxubWFpbigpIiwiZXhwb3J0IGNsYXNzIEJ1dHRvbkdyb3VwIHtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmVudEVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLl9wYXJlbnRFbGVtZW50ID0gcGFyZW50RWxlbWVudDtcclxuICAgICAgICAvL2ZpbmQgYWxsIHRoZSBidXR0b25zIHdpdGhpbiB0aGUgcGFyZW50IGVsZW1lbnRcclxuICAgICAgICB0aGlzLmJ1dHRvbnMgPSBBcnJheS5mcm9tKHBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcImJ1dHRvblwiKSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJCVVRUT05TXCIsIHRoaXMuYnV0dG9ucyk7XHJcblxyXG4gICAgICAgIHRoaXMuc2VsZWN0YWJsZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50U2VsZWN0ZWQgPSB0aGlzLmJ1dHRvbnNbMF07XHJcblxyXG4gICAgICAgIC8vbGlzdGVuIHRvIGFsbCB0aGUgYnV0dG9ucyBmb3IgYSBjbGlja1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmJ1dHRvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5idXR0b25zW2ldLm9uY2xpY2sgPSB0aGlzLl9vbkJ1dHRvbkNsaWNrZWQuYmluZCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBTVEFUSUMgTUVUSE9EUyAtLS0tLS0tLS0tLS0tLS0tLS0qLyAgICBcclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIE1FVEhPRFMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFVkVOVFMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG4gICAgX29uQnV0dG9uQ2xpY2tlZChlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJDQUxMRURcIik7XHJcbiAgICAgICAgaWYodGhpcy5zZWxlY3RhYmxlKSB7XHJcbiAgICAgICAgICAgIC8vdGVzdCBhZ2FpbnN0IGN1cnJlbnQgaWYgc2VsZWN0YWJsZVxyXG4gICAgICAgICAgICBpZih0aGlzLmN1cnJlbnRTZWxlY3RlZCAhPSBlLnRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgLy9jaGFuZ2Ugc2VsZWN0ZWRcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFNlbGVjdGVkLmNsYXNzTGlzdC5yZW1vdmUoXCJzZWxlY3RlZFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFNlbGVjdGVkID0gZS50YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRTZWxlY3RlZC5jbGFzc0xpc3QuYWRkKFwic2VsZWN0ZWRcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vbG9vayBmb3IgYSBkYXRhIHZhbHVlXHJcbiAgICAgICAgaWYoZS50YXJnZXQuZGF0YXNldC52YWx1ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGxldCBjbGlja0V2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KFwiYnV0dG9uLWNsaWNrXCIsIHtkZXRhaWw6ZS50YXJnZXQuZGF0YXNldC52YWx1ZX0pO1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJlbnRFbGVtZW50LmRpc3BhdGNoRXZlbnQoY2xpY2tFdmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gT1ZFUlJJREVTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEdFVFRFUlMgQU5EIFNFVFRFUlMgLS0tLS0tLS0tLS0tLSovXHJcbiAgICBnZXQgUGFyZW50RWxlbWVudCgpIHsgcmV0dXJuIHRoaXMuX3BhcmVudEVsZW1lbnQ7IH1cclxufSIsImV4cG9ydCBjbGFzcyBCdXR0b25Ub2dnbGUge1xyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gU1RBVElDIE1FVEhPRFMgLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuICAgIHN0YXRpYyBsb2FkKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiTE9BREVEIEJVVFRPTlNcIik7XHJcbiAgICAgICAgY29uc3QgdG9nZ2xlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS10b2dnbGVdXCIpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRvZ2dsZXMpO1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0b2dnbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsID0gdG9nZ2xlc1tpXTtcclxuICAgICAgICAgICAgLy9zZXQgdG8gZmFsc2VcclxuICAgICAgICAgICAgaWYoZWwuZGF0YXNldC50b2dnbGUgPT0gbnVsbCkgZWwuZGF0YXNldC50b2dnbGUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIC8vbGlzdGVuIHRvIGNsaWNrXHJcbiAgICAgICAgICAgIGVsLm9uY2xpY2sgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZS50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNPbiA9IChlbC5kYXRhc2V0LnRvZ2dsZSAhPSBudWxsKSA/IGVsLmRhdGFzZXQudG9nZ2xlID09IFwidHJ1ZVwiIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBlbC5kYXRhc2V0LnRvZ2dsZSA9ICFpc09uO1xyXG4gICAgICAgICAgICB9ICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBNRVRIT0RTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIE9WRVJSSURFUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBHRVRURVJTIEFORCBTRVRURVJTIC0tLS0tLS0tLS0tLS0qL1xyXG59IiwiZXhwb3J0IGNsYXNzIEN1cnNvciB7XHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBTVEFUSUMgTUVUSE9EUyAtLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG4gICAgc3RhdGljIGxvYWQoKSB7XHJcbiAgICAgICAgQ3Vyc29yLl9jdXJzb3JzID0ge307XHJcbiAgICAgICAgQ3Vyc29yLl9sYXN0TW91c2VQb3MgPSB7eDowLCB5OjB9O1xyXG4gICAgICAgIEN1cnNvci5fbW91c2VCdXR0b24gPSAwO1xyXG5cclxuICAgICAgICBjb25zdCBjdXJzb3JzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLWN1cnNvcl1cIik7XHJcbiAgICAgICAgY29uc29sZS5sb2coY3Vyc29ycyk7XHJcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGN1cnNvcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgZWwgPSBjdXJzb3JzW2ldO1xyXG4gICAgICAgICAgICAvL2NyZWF0ZSBjdXJzb3IgbG9naWNcclxuICAgICAgICAgICAgQ3Vyc29yLl9jdXJzb3JzW2VsLmRhdGFzZXQuY3Vyc29ybmFtZV0gPSBuZXcgQ3Vyc29yTG9naWMoZWwpOyBcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIE1FVEhPRFMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFVkVOVFMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gT1ZFUlJJREVTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEdFVFRFUlMgQU5EIFNFVFRFUlMgLS0tLS0tLS0tLS0tLSovXHJcbiAgICBzdGF0aWMgZ2V0IEN1cnNvcnMoKSB7IHJldHVybiBDdXJzb3IuX2N1cnNvcnM7IH1cclxufVxyXG5cclxuXHJcblxyXG5jbGFzcyBDdXJzb3JMb2dpYyB7XHJcbiAgICBjb25zdHJ1Y3RvcihjdXJzb3JFbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JFbGVtZW50ID0gY3Vyc29yRWxlbWVudDtcclxuICAgICAgICB0aGlzLmN1cnNvckJvdW5kc0VsZW1lbnQgPSBjdXJzb3JFbGVtZW50LmNsb3Nlc3QoXCJbZGF0YS1jdXJzb3ItYm91bmRzXVwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5fY3Vyc29yTW92ZUV2ZW50ID0gdGhpcy5fb25DdXJzb3JNb3ZlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5fY3Vyc29yQ2xpY2tFdmVudCA9IHRoaXMuX29uQ3Vyc29yQ2xpY2suYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLl9jdXJzb3JSZWxlYXNlRXZlbnQgPSB0aGlzLl9vbkN1cnNvclJlbGVhc2UuYmluZCh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5fcG9zaXRpb24gPSB7eDowLCB5OjB9O1xyXG4gICAgICAgIHRoaXMuX2lzQ2xpY2tlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIE1FVEhPRFMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbiAgICBsaXN0ZW4oKSB7XHJcblxyXG4gICAgICAgIC8vbGlzdGVuIGZvciBjdXJzb3IgbW92ZW1lbnRcclxuICAgICAgICB0aGlzLmN1cnNvckJvdW5kc0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLl9jdXJzb3JNb3ZlRXZlbnQpO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yQm91bmRzRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuX2N1cnNvckNsaWNrRXZlbnQpO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yQm91bmRzRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLl9jdXJzb3JSZWxlYXNlRXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHVubGlzdGVuKCkge1xyXG4gICAgICAgIC8vc3RvcCBsaXN0ZW4gZm9yIGN1cnNvciBtb3ZlbWVudFxyXG4gICAgICAgIHRoaXMuY3Vyc29yQm91bmRzRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMuX2N1cnNvck1vdmVFdmVudCk7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JCb3VuZHNFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5fY3Vyc29yQ2xpY2tFdmVudCk7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JCb3VuZHNFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMuX2N1cnNvclJlbGVhc2VFdmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqUmV0dXJucyBhIHZhbHVlIGZvciB0aGUgZ3JpZC4gKi9cclxuICAgIF9nZXRDbG9zZXN0KHZhbCkge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHZhbCAvIDE3KSAqIDE3O1xyXG4gICAgfVxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuICAgIF9vbkN1cnNvck1vdmUoZSkge1xyXG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uID0ge3g6dGhpcy5fZ2V0Q2xvc2VzdChlLmNsaWVudFgtdGhpcy5jdXJzb3JCb3VuZHNFbGVtZW50Lm9mZnNldExlZnQpLCB5OnRoaXMuX2dldENsb3Nlc3QoZS5jbGllbnRZLXRoaXMuY3Vyc29yQm91bmRzRWxlbWVudC5vZmZzZXRUb3ApfTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIk1PVkVcIiwgdGhpcy5fcG9zaXRpb24pO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuY3Vyc29yRWxlbWVudCk7XHJcbiAgICAgICAgLy9tb3ZlIGN1cnNvclxyXG4gICAgICAgIHRoaXMuY3Vyc29yRWxlbWVudC5zdHlsZS5sZWZ0ID0gYCR7dGhpcy5fcG9zaXRpb24ueH1weGA7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JFbGVtZW50LnN0eWxlLnRvcCA9IGAke3RoaXMuX3Bvc2l0aW9uLnl9cHhgO1xyXG5cclxuICAgICAgICAvLyBjb25zdCBkaXN0ID0gKE1hdGguYWJzKHRoaXMuX3Bvc2l0aW9uLnggLSBDdXJzb3IuX2xhc3RNb3VzZVBvcy54KSArIE1hdGguYWJzKHRoaXMuX3Bvc2l0aW9uLnkgLSBDdXJzb3IuX2xhc3RNb3VzZVBvcy55KSkgLyAyO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiRElTVFwiLCBkaXN0KTtcclxuICAgICAgICBpZih0aGlzLl9pc0NsaWNrZWQpIHtcclxuICAgICAgICAgICAgbGV0IGRyYWdFdmVudCA9IG5ldyBDdXN0b21FdmVudChcImN1cnNvci1kcmFnXCIsIHsnZGV0YWlsJzogdGhpcy5fcG9zaXRpb259KTtcclxuICAgICAgICAgICAgdGhpcy5jdXJzb3JFbGVtZW50LmRpc3BhdGNoRXZlbnQoZHJhZ0V2ZW50KTtcclxuXHJcbiAgICAgICAgICAgIC8vcmlnaHQgY2xpY2tcclxuICAgICAgICAgICAgaWYoQ3Vyc29yLl9tb3VzZUJ1dHRvbiA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIllFXCIpXHJcbiAgICAgICAgICAgICAgICBkcmFnRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoXCJjdXJzb3ItcmlnaHQtZHJhZ1wiLCB7J2RldGFpbCc6IHRoaXMuX3Bvc2l0aW9ufSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnNvckVsZW1lbnQuZGlzcGF0Y2hFdmVudChkcmFnRXZlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIF9vbkN1cnNvckNsaWNrKGUpIHtcclxuICAgICAgICBDdXJzb3IuX21vdXNlQnV0dG9uID0gZS5idXR0b247XHJcblxyXG4gICAgICAgIHRoaXMuX29uQ3Vyc29yTW92ZShlKTtcclxuXHJcbiAgICAgICAgdGhpcy5faXNDbGlja2VkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgQ3Vyc29yLl9sYXN0TW91c2VQb3MgPSB7eDp0aGlzLl9nZXRDbG9zZXN0KGUuY2xpZW50WC10aGlzLmN1cnNvckJvdW5kc0VsZW1lbnQub2Zmc2V0TGVmdCksIHk6dGhpcy5fZ2V0Q2xvc2VzdChlLmNsaWVudFktdGhpcy5jdXJzb3JCb3VuZHNFbGVtZW50Lm9mZnNldFRvcCl9O1xyXG5cclxuICAgICAgICBsZXQgY2xpY2tFdmVudCA9IG5ldyBDdXN0b21FdmVudChcImN1cnNvci1jbGlja1wiLCB7J2RldGFpbCc6IHRoaXMuX3Bvc2l0aW9ufSk7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JFbGVtZW50LmRpc3BhdGNoRXZlbnQoY2xpY2tFdmVudCk7XHJcblxyXG4gICAgICAgIC8vcmlnaHQgY2xpY2tcclxuICAgICAgICBpZihlLmJ1dHRvbiA9PSAyKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgY2xpY2tFdmVudCA9IG5ldyBDdXN0b21FdmVudChcImN1cnNvci1yaWdodC1jbGlja1wiLCB7J2RldGFpbCc6IHRoaXMuX3Bvc2l0aW9ufSk7XHJcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yRWxlbWVudC5kaXNwYXRjaEV2ZW50KGNsaWNrRXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBfb25DdXJzb3JSZWxlYXNlKGUpIHtcclxuICAgICAgICB0aGlzLl9pc0NsaWNrZWQgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIE9WRVJSSURFUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBHRVRURVJTIEFORCBTRVRURVJTIC0tLS0tLS0tLS0tLS0qL1xyXG4gICAgZ2V0IEN1cnNvckVsZW1lbnQoKSB7IHJldHVybiB0aGlzLmN1cnNvckVsZW1lbnQ7IH1cclxuICAgIGdldCBQb3NpdGlvbigpIHsgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uOyB9XHJcbn0iXX0="}